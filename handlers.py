# handlers
from datetime import datetime

from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberUpdated
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError

import asyncio
from typing import Union
from bot import bot
from loguru import logger
from events_data import get_sample_events
from states import PortfolioState, AlertState, CalendarStates
from keyboards import main_menu, asset_type_keyboard, alert_condition_keyboard, alert_actions_keyboard, \
    portfolio_actions_keyboard, confirm_alert_keyboard, confirm_remove_asset_keyboard, alerts_menu_keyboard, \
    quotes_menu_keyboard, calendar_menu_keyboard, pagination_keyboard, get_category_keyboard, get_pagination_keyboard, \
    settings_keyboard, portfolio_view_keyboard, confirm_delete_sub_account_keyboard, sub_account_select_keyboard_for_delete
from database import add_to_portfolio, get_portfolio, remove_from_portfolio, add_alert, get_alerts, remove_alert, \
    get_events, load_sample_events, get_or_create_chat_settings, update_chat_settings, get_sub_accounts, delete_sub_account
from api import get_stock_price, get_crypto_price, fetch_asset_price, get_stock_history, get_crypto_history, \
    get_stock_price_with_retry, get_market_data, fetch_asset_price_with_retry
from utils import format_portfolio, format_alerts, format_events, format_market_prices, format_market_overview, EVENT_TYPES, calculate_portfolio_summary


router = Router()
CHANNEL_ID = "@offensivepoltergeist"

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    if not await is_user_allowed(message):
         return
    user_id = message.from_user.id
    chat_id = message.chat.id
    chat_type = message.chat.type


    if not await check_subscription_middleware(message, state):
         return


    is_admin = await is_user_admin(chat_id, user_id) if chat_type != 'private' else False

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(chat_type, is_admin))
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ (–ø–æ–¥–ø–∏—Å–∞–Ω).")


async def check_subscription_middleware(message: Message, state: FSMContext = None):
    user_id = message.from_user.id
    is_subscribed = await check_subscription(user_id)

    if not is_subscribed:
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {CHANNEL_ID}.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")]
            ])
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏.")

        if state:
            await state.clear()
        return False
    return True

async def display_portfolio(message_or_callback: Union[Message, CallbackQuery], state: FSMContext, user_id: int, target_sub_account: str, page: int = 1):
    """Helper function to calculate summary and display portfolio"""
    is_message = isinstance(message_or_callback, Message)
    chat = message_or_callback.chat if is_message else message_or_callback.message.chat

    full_portfolio_data = await get_portfolio(user_id)
    sub_accounts = await get_sub_accounts(user_id)

    if target_sub_account not in sub_accounts:
        logger.warning(f"Target sub-account '{target_sub_account}' not found for user {user_id}, defaulting to '–û—Å–Ω–æ–≤–Ω–æ–π'.")
        target_sub_account = "–û—Å–Ω–æ–≤–Ω–æ–π"
        if target_sub_account not in sub_accounts:
            sub_accounts.insert(0, target_sub_account)

    total_value, total_purchase, total_pnl = await calculate_portfolio_summary(full_portfolio_data)
    prices_available = True

    assets_in_current_sub = full_portfolio_data.get(target_sub_account, [])

    page_assets_with_prices = []
    items_per_page = 4
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_items_to_fetch = assets_in_current_sub[start_idx:end_idx]

    if page_items_to_fetch:
        tasks = [fetch_asset_price_with_retry(asset['symbol'], asset['asset_type']) for asset in page_items_to_fetch]
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω –¥–ª—è {len(tasks)} –∞–∫—Ç–∏–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} —Å—É–±-—Å—á–µ—Ç–∞ {target_sub_account}...")
        page_prices = await asyncio.gather(*tasks)
        logger.info("–¶–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã.")

        for i, asset in enumerate(page_items_to_fetch):
            asset_copy = asset.copy()
            asset_copy['current_price'] = page_prices[i]
            page_assets_with_prices.append(asset_copy)
    else:
        page_assets_with_prices = []

    formatted_portfolio, total_pages = format_portfolio(
        page_assets_with_prices,
        page=page,
        items_per_page=items_per_page,
        total_portfolio_value=total_value,
        total_portfolio_pnl=total_pnl,
        prices_available_overall=prices_available
    )

    await state.set_state(PortfolioState.viewing_portfolio)
    await state.update_data(current_sub_account=target_sub_account, current_page=page)

    message_text = f"üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å: –°—É–±-—Å—á–µ—Ç '{target_sub_account}'\n\n{formatted_portfolio}"
    reply_markup = portfolio_view_keyboard(sub_accounts, target_sub_account, page, total_pages)

    if is_message:
        await message_or_callback.answer(message_text, reply_markup=reply_markup)
    else:
        try:
            if message_or_callback.message.text != message_text or str(message_or_callback.message.reply_markup) != str(reply_markup):
                await message_or_callback.message.edit_text(message_text, reply_markup=reply_markup)
            else:
                await message_or_callback.answer()
        except TelegramAPIError as e:
            if "message is not modified" in str(e):
                await message_or_callback.answer()
            else:
                logger.error(f"Failed to edit message for portfolio view: {e}")
                await message_or_callback.message.answer(message_text, reply_markup=reply_markup)
                await message_or_callback.answer()

@router.message(Command("help"))
async def cmd_help(message: Message):
    if not await is_user_allowed(message):
        return
    help_text = """
üìã *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
/quotes - –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
/set_alert - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
/alerts - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
/remove_alert - –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç
/add_to_portfolio - –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (—É—Å—Ç–∞—Ä–µ–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é)
/remove_from_portfolio - –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (—É—Å—Ç–∞—Ä–µ–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é)
/portfolio - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
/market - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–≤ –≥—Ä—É–ø–ø–∞—Ö)
/calendar - –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π
/load_sample_events - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞?)

üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
2. /portfolio –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤ –∏ —Å—É–±-—Å—á–µ—Ç–æ–≤.
3. /quotes –ø–æ–∫–∞–∂–µ—Ç –º–µ–Ω—é –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.
4. /alerts –ø–æ–∫–∞–∂–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏.
5. /calendar –ø–æ–∫–∞–∂–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π.
6. /market –ø–æ–∫–∞–∂–µ—Ç –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ (–∏–Ω–¥–µ–∫—Å—ã, —Å—ã—Ä—å–µ, –∫—Ä–∏–ø—Ç–æ).
7. /cancel –æ—Ç–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞).
"""
    try:
        await message.answer(help_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏: {e}")
        await message.answer(help_text, parse_mode=None)

@router.message(Command("quotes"))
async def cmd_quotes(message: Message, state: FSMContext):
    if not await is_user_allowed(message):
        return
    if not await check_subscription_middleware(message, state):
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏:", reply_markup=quotes_menu_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –º–µ–Ω—é –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.
@router.callback_query(PortfolioState.selecting_asset_type)
async def select_asset_type(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    await state.update_data(asset_type=callback.data)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT):")
    await state.set_state(PortfolioState.selecting_symbol)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.
@router.message(PortfolioState.selecting_symbol)
async def get_quote(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    symbol = message.text.strip().upper()
    data = await state.get_data()
    asset_type = data.get("asset_type")

    if not asset_type:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        logger.warning(f"User {message.from_user.id} in state selecting_symbol without asset_type.")
        return

    if symbol.startswith('/'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")

        return

    price = None
    if asset_type == "stock":
        if not symbol.isalpha() and not symbol.endswith(".ME") and "." not in symbol:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä. AAPL, SBER.ME, BRK.B).")

            return
        price = await fetch_asset_price_with_retry(symbol, asset_type)
    elif asset_type == "crypto":
        if '/' not in symbol:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –§–æ—Ä–º–∞—Ç: 'BTC/USDT'.")

            return
        price = await fetch_asset_price_with_retry(symbol, asset_type)

    if price is not None:
        await message.answer(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: ${price:.2f}")
    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ü–µ–Ω—É {symbol} ({asset_type}).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.
@router.callback_query(PortfolioState.adding_asset_type)
async def add_asset_type(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    await state.update_data(asset_type=callback.data)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT):")
    await state.set_state(PortfolioState.adding_symbol)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.
@router.message(PortfolioState.adding_symbol)
async def add_symbol(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    user_id = message.from_user.id
    symbol = message.text.strip().upper()
    data = await state.get_data()
    asset_type = data.get("asset_type")

    if not asset_type:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–∏–ø –∞–∫—Ç–∏–≤–∞). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    if symbol.startswith('/'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return

    if asset_type == "stock":
        if not symbol.isalpha() and not symbol.endswith(".ME") and "." not in symbol:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä. AAPL, SBER.ME, BRK.B).")
            return
        
    elif asset_type == "crypto":
        if '/' not in symbol:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –§–æ—Ä–º–∞—Ç: 'BTC/USDT'.")
            return


    price = await fetch_asset_price_with_retry(symbol, asset_type)
    if price is None:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤ {symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await state.update_data(symbol=symbol)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞:")
    await state.set_state(PortfolioState.adding_amount)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–∏–º–≤–æ–ª {symbol} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞.
@router.message(PortfolioState.adding_amount)
async def add_amount(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    user_id = message.from_user.id
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(amount=amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (–∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É):")
        await state.set_state(PortfolioState.adding_price)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞: {message.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏.
@router.message(PortfolioState.adding_price)
async def add_price(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    user_id = message.from_user.id
    main_account_name = "–û—Å–Ω–æ–≤–Ω–æ–π"
    try:
        price = float(message.text.replace(',', '.'))
        if price < 0:
            await message.answer("–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            return
        data = await state.get_data()
        target_sub_account = data.get("target_sub_account", main_account_name)
        asset_type = data.get("asset_type")
        symbol = data.get("symbol")
        amount = data.get("amount")

        if not all([target_sub_account, asset_type, symbol, amount]):
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            logger.error(f"Incomplete state data in add_price for user {user_id}: {data}")
            return

        await add_to_portfolio(
            user_id=user_id,
            sub_account_name=target_sub_account,
            asset_type=asset_type,
            symbol=symbol,
            amount=amount,
            purchase_price=price
        )
        await message.answer(f"–ê–∫—Ç–∏–≤ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—É–±-—Å—á–µ—Ç '{target_sub_account}'!")


        await display_portfolio(message, state, user_id, target_sub_account, page=1)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å: {symbol} ({asset_type}) –≤ —Å—É–±-—Å—á–µ—Ç '{target_sub_account}'")

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏).")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É: {message.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(Command("set_alert"))
async def cmd_set_alert(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    if not await check_subscription_middleware(message, state): return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(AlertState.selecting_asset_type)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑ —á–∞—Ç–∞ {message.chat.id} –Ω–∞—á–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–ª–µ—Ä—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞.
@router.callback_query(AlertState.selecting_asset_type)
async def select_alert_asset_type(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    await state.update_data(asset_type=callback.data)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT):")
    await state.set_state(AlertState.selecting_symbol)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞.
@router.message(AlertState.selecting_symbol)
async def select_alert_symbol(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    chat_id = message.chat.id
    user_id = message.from_user.id
    symbol = message.text.strip().upper()
    data = await state.get_data()
    asset_type = data.get("asset_type")

    if not asset_type:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–∏–ø –∞–∫—Ç–∏–≤–∞). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    if symbol.startswith('/'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return

    if asset_type == "stock":
         if not symbol.isalpha() and not symbol.endswith(".ME") and "." not in symbol:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä. AAPL, SBER.ME, BRK.B).")
            return
         
    elif asset_type == "crypto":
        if '/' not in symbol:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –§–æ—Ä–º–∞—Ç: 'BTC/USDT'.")
            return


    price = await fetch_asset_price_with_retry(symbol, asset_type)
    if price is None:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤ {symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await state.update_data(symbol=symbol)
    await message.answer(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: ${price:.2f}\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –∞–ª–µ—Ä—Ç–∞:")
    await state.set_state(AlertState.selecting_price)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–∏–º–≤–æ–ª {symbol} –¥–ª—è –∞–ª–µ—Ä—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è –∞–ª–µ—Ä—Ç–∞.
@router.message(AlertState.selecting_price)
async def select_alert_price(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    chat_id = message.chat.id
    user_id = message.from_user.id
    try:
        target_price = float(message.text.replace(',', '.'))
        if target_price <= 0:
            await message.answer("–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(target_price=target_price)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∞–ª–µ—Ä—Ç–∞:", reply_markup=alert_condition_keyboard())
        await state.set_state(AlertState.selecting_condition)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É: {message.text} –≤ —á–∞—Ç–µ {chat_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏—è –∞–ª–µ—Ä—Ç–∞ (above –∏–ª–∏ below).
@router.callback_query(AlertState.selecting_condition, F.data.in_({"above", "below"}))
async def select_alert_condition(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    condition = callback.data
    data = await state.get_data()
    symbol = data.get("symbol")
    target_price = data.get("target_price")

    if not symbol or target_price is None:
        await callback.message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        logger.error(f"Incomplete state data in select_alert_condition for chat {chat_id}: {data}")
        await callback.answer()
        return


    await state.update_data(condition=condition)
    await callback.message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–ª–µ—Ä—Ç:\n"
        f"–ê–∫—Ç–∏–≤: {symbol}\n"
        f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${target_price:.2f}\n"
        f"–£—Å–ª–æ–≤–∏–µ: {'–≤—ã—à–µ' if condition == 'above' else '–Ω–∏–∂–µ'}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_alert"),
                InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ]
        ])
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —É—Å–ª–æ–≤–∏–µ –∞–ª–µ—Ä—Ç–∞: {condition} –≤ —á–∞—Ç–µ {chat_id}")

@router.message(Command("calendar"))
async def show_calendar(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    if not await check_subscription_middleware(message, state): return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π:", reply_markup=get_category_keyboard())
    await state.set_state(CalendarStates.viewing_calendar)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π.")

@router.message(PortfolioState.removing_symbol)
async def handle_remove_asset_symbol_from_subaccount(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    user_id = message.from_user.id
    symbol = message.text.strip().upper()
    data = await state.get_data()
    target_sub_account = data.get("target_sub_account")

    if not target_sub_account:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Å—É–±-—Å—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    if symbol.startswith('/'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return

    portfolio_data = await get_portfolio(user_id)
    assets_in_sub = portfolio_data.get(target_sub_account, [])
    asset_exists = any(asset['symbol'] == symbol for asset in assets_in_sub)

    if not asset_exists:
        await message.answer(f"–ê–∫—Ç–∏–≤ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—É–±-—Å—á–µ—Ç–µ '{target_sub_account}'.")
        return


    await state.update_data(symbol_to_remove=symbol)
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {symbol} –∏–∑ —Å—É–±-—Å—á–µ—Ç–∞ '{target_sub_account}'?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_{target_sub_account}_{symbol}"),
                InlineKeyboardButton(text="üö´ –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_remove")
            ]
        ])
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ {symbol} –∏–∑ '{target_sub_account}'.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /market –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω.
@router.message(Command("market"))
async def cmd_market(message: Message):
    if not await is_user_allowed(message): return
    if not await check_subscription_middleware(message): return

    user_id = message.from_user.id
    chat_id = message.chat.id
    chat_type = message.chat.type
    is_admin = await is_user_admin(chat_id, user_id) if chat_type != 'private' else False

    market_data = await get_market_data()
    formatted_market = format_market_overview(market_data)

    await message.answer(formatted_market, reply_markup=main_menu(chat_type, is_admin), parse_mode="Markdown")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤.
def register_handlers(dp: Router):
    dp.include_router(router)

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    chat_type = message.chat.type
    is_admin = await is_user_admin(chat_id, user_id) if chat_type != 'private' else False

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(chat_type, is_admin))
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é ({current_state}).")


@router.message(Command("alerts"))
async def cmd_alerts(message: Message):
    if not await is_user_allowed(message): return
    if not await check_subscription_middleware(message): return
    chat_id = message.chat.id
    alerts = await get_alerts(chat_id)

    if not alerts:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_alert –∏–ª–∏ –º–µ–Ω—é '–ê–ª–µ—Ä—Ç—ã', —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç."
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–ª–µ—Ä—Ç—ã –≤ —á–∞—Ç–µ {chat_id} (—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç).")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–ª–µ—Ä—Ç–∞–º–∏:", reply_markup=alerts_menu_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç–µ {chat_id}.")


@router.message(Command("remove_alert"))
async def cmd_remove_alert(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    chat_id = message.chat.id
    user_id = message.from_user.id
    alerts = await get_alerts(chat_id)

    if not alerts:
        await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –≤ —á–∞—Ç–µ {chat_id} (—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç).")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–ª–µ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
        "–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ê–ª–µ—Ä—Ç—ã' -> '–¢–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã'."
    )
    await state.set_state(AlertState.removing_alert)


@router.callback_query(F.data == "quotes_menu")
async def handle_quotes_menu(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏:", reply_markup=quotes_menu_keyboard())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.")


@router.callback_query(F.data == "quotes")
async def handle_quotes(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    if not await check_subscription_middleware(callback.message, state):
        await callback.answer()
        return
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(PortfolioState.selecting_asset_type)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ—Ç–∏—Ä–æ–≤–∫–∏.")

@router.message(Command("portfolio"))
@router.callback_query(F.data == "portfolio_view_default")
async def handle_portfolio_view_start(message_or_callback: Union[Message, CallbackQuery], state: FSMContext):
    if not await is_user_allowed(message_or_callback): return

    is_message = isinstance(message_or_callback, Message)
    message = message_or_callback if is_message else message_or_callback.message
    user_id = message.from_user.id
    main_account_name = "–û—Å–Ω–æ–≤–Ω–æ–π"

    if not await check_subscription_middleware(message, state):
        if not is_message: await message_or_callback.answer()
        return

    await display_portfolio(message_or_callback, state, user_id, main_account_name, page=1)

    if not is_message: await message_or_callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –ø–æ—Ä—Ç—Ñ–µ–ª—å.")


@router.callback_query(F.data == "portfolio_add_sub_account_start")
async def handle_add_sub_account_start(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—É–±-—Å—á–µ—Ç–∞:")
    await state.set_state(PortfolioState.adding_sub_account_new_name)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—É–±-—Å—á–µ—Ç–∞.")

@router.message(PortfolioState.adding_sub_account_new_name)
async def handle_add_sub_account_name(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    user_id = message.from_user.id
    new_sub_account_name = message.text.strip()
    main_account_name = "–û—Å–Ω–æ–≤–Ω–æ–π"

    if not new_sub_account_name:
        await message.answer("–ò–º—è —Å—É–±-—Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel.")
        return

    if new_sub_account_name == main_account_name:
        await message.answer(f"–ò–º—è '{main_account_name}' –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
        return

    if "/" in new_sub_account_name or "_" in new_sub_account_name:
        await message.answer("–ò–º—è —Å—É–±-—Å—á–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã '/' –∏–ª–∏ '_'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    existing_sub_accounts = await get_sub_accounts(user_id)
    if new_sub_account_name in existing_sub_accounts:
        await message.answer(f"–°—É–±-—Å—á–µ—Ç —Å –∏–º–µ–Ω–µ–º '{new_sub_account_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        return


    await display_portfolio(message, state, user_id, new_sub_account_name, page=1)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª (–∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ) —Å—É–±-—Å—á–µ—Ç '{new_sub_account_name}' –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –Ω–µ–≥–æ.")


@router.callback_query(PortfolioState.removing_sub_account_selection_for_delete, F.data.startswith("p_sel_del_"))
async def handle_remove_sub_account_select_for_delete(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    sub_account_to_delete = callback.data.replace("p_sel_del_", "")
    main_account_name = "–û—Å–Ω–æ–≤–Ω–æ–π"

    if sub_account_to_delete == main_account_name:
        await callback.answer(f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å '{main_account_name}'.", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—É–±-—Å—á–µ—Ç '{sub_account_to_delete}' –∏ –í–°–ï –∞–∫—Ç–∏–≤—ã –≤ –Ω–µ–º? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=confirm_delete_sub_account_keyboard(sub_account_to_delete)
        )
    except TelegramAPIError as e:
         if "message is not modified" not in str(e): logger.error(f"Error editing message in handle_remove_sub_account_select_for_delete: {e}")

    await callback.answer()

@router.callback_query(F.data == "cancel_sub_account_delete")
async def handle_cancel_sub_account_delete(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    current_data = await state.get_data()

    await display_portfolio(callback, state, user_id, "–û—Å–Ω–æ–≤–Ω–æ–π", page=1)

    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å—É–±-—Å—á–µ—Ç–∞.")

@router.callback_query(F.data.startswith("p_conf_del_"))
async def handle_confirm_sub_account_delete(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    sub_account_to_delete = callback.data.replace("p_conf_del_", "")
    main_account_name = "–û—Å–Ω–æ–≤–Ω–æ–π"


    if sub_account_to_delete == main_account_name:
        await callback.answer(f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å '{main_account_name}'.", show_alert=True)
        return

    try:
        await delete_sub_account(user_id, sub_account_to_delete)
        await callback.message.edit_text(f"–°—É–±-—Å—á–µ—Ç '{sub_account_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å—É–±-—Å—á–µ—Ç '{sub_account_to_delete}'.")


        await display_portfolio(callback, state, user_id, main_account_name, page=1)

    except ValueError as ve:
        logger.warning(f"ValueError during sub-account delete confirmation for {user_id}, account '{sub_account_to_delete}': {ve}")
        await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—É–±-—Å—á–µ—Ç: {ve}")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É–±-—Å—á–µ—Ç–∞ '{sub_account_to_delete}' –¥–ª—è {user_id}: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É–±-—Å—á–µ—Ç–∞.")
        await state.clear()

    await callback.answer()

@router.callback_query(F.data == "portfolio_remove_sub_account_start")
async def handle_remove_sub_account_start(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    sub_accounts = await get_sub_accounts(user_id)
    removable_accounts = [acc for acc in sub_accounts if acc != "–û—Å–Ω–æ–≤–Ω–æ–π"]

    if not removable_accounts:
        await callback.answer("–ù–µ—Ç —Å—É–±-—Å—á–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.", show_alert=True)
        return

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±-—Å—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ –≤ –Ω–µ–º):",
        reply_markup=sub_account_select_keyboard_for_delete(sub_accounts)
    )
    await state.set_state(PortfolioState.removing_sub_account_selection_for_delete)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å—É–±-—Å—á–µ—Ç–∞.")


@router.callback_query(F.data == "set_alert")
async def handle_set_alert(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    if not await check_subscription_middleware(callback.message, state):
        await callback.answer()
        return

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(AlertState.selecting_asset_type)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–ª–µ—Ä—Ç–∞ –≤ —á–∞—Ç–µ {callback.message.chat.id} (–∏–∑ –º–µ–Ω—é).")


@router.callback_query(F.data == "calendar")
async def handle_calendar_menu(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    if not await check_subscription_middleware(callback.message, state):
        await callback.answer()
        return
    user_id = callback.from_user.id
    try:

        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π:", reply_markup=get_category_keyboard())
        await state.set_state(CalendarStates.viewing_calendar)
        await callback.answer()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
        await callback.answer()


@router.callback_query(F.data == "help")
async def handle_help(callback: CallbackQuery):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    chat_type = callback.message.chat.type
    is_admin = await is_user_admin(chat_id, user_id) if chat_type != 'private' else False
    help_text = """
üìã *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:*

- üìà –ö–æ—Ç–∏—Ä–æ–≤–∫–∏: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞
- üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –∏ —Å—É–±-—Å—á–µ—Ç–∞–º–∏
- üîî –ê–ª–µ—Ä—Ç—ã: –£–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –æ —Ü–µ–Ω–µ
- üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π
- üìä –†—ã–Ω–æ–∫: –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ (–∏–Ω–¥–µ–∫—Å—ã, —Å—ã—Ä—å–µ, –∫—Ä–∏–ø—Ç–æ)
- ‚ÑπÔ∏è –ü–æ–º–æ—â—å: –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
- ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ (–≤ –≥—Ä—É–ø–ø–∞—Ö)
- üö´ –û—Ç–º–µ–Ω–∞: –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö)

üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (—Å–∏–º–≤–æ–ª—ã, —Ü–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ).
3. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.
"""
    try:
        await callback.message.edit_text(help_text, reply_markup=main_menu(chat_type, is_admin), parse_mode="Markdown")
    except TelegramAPIError as e:
         if "message is not modified" not in str(e): logger.error(f"Error editing help message: {e}")

    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†—ã–Ω–æ–∫' –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞.
@router.callback_query(F.data == "market")
async def handle_market_overview(callback: CallbackQuery):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    chat_type = callback.message.chat.type
    is_admin = await is_user_admin(chat_id, user_id) if chat_type != 'private' else False
    market_data = await get_market_data()
    formatted_market = format_market_overview(market_data)
    try:
        await callback.message.edit_text(formatted_market, reply_markup=main_menu(chat_type, is_admin), parse_mode="Markdown")
    except TelegramAPIError as e:
         if "message is not modified" not in str(e): logger.error(f"Error editing market overview message: {e}")

    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞.")


@router.callback_query(F.data == "remove_asset")
async def handle_remove_asset_prompt(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    await callback.message.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ü–æ—Ä—Ç—Ñ–µ–ª—å' -> 'üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç—Å—é–¥–∞'.")
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤'.")


@router.callback_query(F.data == "alerts")
async def handle_alerts(callback: CallbackQuery):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    alerts = await get_alerts(chat_id) # Alerts are chat-specific

    try:
        if not alerts:
             await callback.message.edit_text(
                "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. üòî\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.",
                reply_markup=alerts_menu_keyboard() # Show menu anyway
            )
             logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Ç–µ {chat_id} (–ø—É—Å—Ç–æ).")
        else:
             await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–ª–µ—Ä—Ç–∞–º–∏:", reply_markup=alerts_menu_keyboard())
             logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Ç–µ {chat_id} (–µ—Å—Ç—å –∞–ª–µ—Ä—Ç—ã).")
    except TelegramAPIError as e:
         if "message is not modified" not in str(e): logger.error(f"Error editing alerts menu message: {e}")


    await callback.answer()


@router.callback_query(F.data == "remove_alert")
async def handle_remove_alert_prompt(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    chat_id = callback.message.chat.id
    alerts = await get_alerts(chat_id)
    if not alerts:
         await callback.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
         return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–ª–µ—Ä—Ç–∞ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (ID –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ '–¢–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã'):")
    await state.set_state(AlertState.removing_alert)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}.")


@router.callback_query(F.data == "confirm_alert")
async def confirm_alert(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    chat_type = callback.message.chat.type
    is_admin = await is_user_admin(chat_id, user_id) if chat_type != 'private' else False
    data = await state.get_data()
    symbol = data.get("symbol")
    target_price = data.get("target_price")
    condition = data.get("condition")
    asset_type = data.get("asset_type")

    if not all([symbol, target_price is not None, condition, asset_type]): # Check target_price explicitly
        try:
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu(chat_type, is_admin)
            )
        except TelegramAPIError as e:
             if "message is not modified" not in str(e): logger.error(f"Error editing confirm_alert error message: {e}")

        await state.clear()
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–ª–µ—Ä—Ç —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {data} –≤ —á–∞—Ç–µ {chat_id}")
        return

    try:
        await add_alert(chat_id, asset_type, symbol, target_price, condition)
        await callback.message.edit_text(f"–ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}!", reply_markup=main_menu(chat_type, is_admin))
        await state.clear()
        await callback.answer("–ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∞–ª–µ—Ä—Ç –¥–ª—è {symbol} –≤ —á–∞—Ç–µ {chat_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –≤ –ë–î –¥–ª—è —á–∞—Ç–∞ {chat_id}, {symbol}: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu(chat_type, is_admin))
        await state.clear()
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'.
@router.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    current_state = await state.get_state()
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    chat_type = callback.message.chat.type
    is_admin = await is_user_admin(chat_id, user_id) if chat_type != 'private' else False

    await state.clear()
    message_text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    reply_markup = main_menu(chat_type, is_admin)

    try:
        # Don't try to edit if the message was already deleted or inaccessible
        if callback.message:
             await callback.message.edit_text(message_text, reply_markup=reply_markup)
    except TelegramAPIError as e:
        if "message to edit not found" in str(e) or "message can't be edited" in str(e):
            # If editing fails, send a new message
            await bot.send_message(chat_id, message_text, reply_markup=reply_markup)
        elif "message is not modified" not in str(e):
             logger.error(f"Error editing cancel message: {e}")
             # Fallback to sending a new message for other errors too
             await bot.send_message(chat_id, message_text, reply_markup=reply_markup)


    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ ({current_state}).")


@router.callback_query(F.data == "settings_open")
async def handle_settings_open(callback: CallbackQuery):

    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    if callback.message.chat.type == 'private':
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.", show_alert=True)
        logger.info(f"User {user_id} clicked settings_open in private chat {chat_id}.")
        return


    can_change = await is_user_admin(chat_id, user_id)

    allow_all, = await get_or_create_chat_settings(chat_id)
    setting_text = "–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" if allow_all else "–†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"

    info_text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞:\n\n" \
                f"–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: *{setting_text}*\n\n" \
                f"–ö—Ç–æ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã/–Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ?"

    reply_markup = settings_keyboard(chat_id, allow_all) if can_change else None

    if not can_change:
        info_text += "\n\n_(–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.)_"


    try:
        await callback.message.edit_text(info_text, reply_markup=reply_markup, parse_mode="Markdown")
    except TelegramAPIError as e:
         if "message is not modified" not in str(e): logger.error(f"Error editing settings open message: {e}")

    await callback.answer()
    logger.info(f"User {user_id} opened settings via button in group {chat_id} (Admin: {can_change}).")


@router.callback_query(F.data.startswith("confirm_remove_"))
async def handle_confirm_remove_asset_from_subaccount(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    try:
        parts = callback.data.split("_")
        # confirm_remove_SUBNAME_SYMBOL -> parts[2]=SUBNAME, parts[3]=SYMBOL
        if len(parts) < 4: raise IndexError("Incorrect callback format")
        symbol_to_remove = parts[-1] # Assume symbol is last part
        sub_account_name = "_".join(parts[2:-1]) # Join parts between confirm_remove_ and symbol
        if not sub_account_name: raise IndexError("Sub-account name missing")

    except IndexError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", show_alert=True)
        await state.clear()
        return

    try:
        await remove_from_portfolio(user_id, sub_account_name, symbol_to_remove)
        await callback.message.edit_text(f"–ê–∫—Ç–∏–≤ {symbol_to_remove} —É–¥–∞–ª–µ–Ω –∏–∑ —Å—É–±-—Å—á–µ—Ç–∞ '{sub_account_name}'.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∞–∫—Ç–∏–≤ {symbol_to_remove} –∏–∑ —Å—É–±-—Å—á–µ—Ç–∞ '{sub_account_name}'.")


        await display_portfolio(callback, state, user_id, sub_account_name, page=1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞ {symbol_to_remove} –∏–∑ '{sub_account_name}' –¥–ª—è {user_id}: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞.")
        await state.clear()


    await callback.answer()


@router.callback_query(F.data == "alerts_menu")
async def handle_alerts_menu(callback: CallbackQuery):
    if not await is_user_allowed(callback): return
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–ª–µ—Ä—Ç–∞–º–∏:", reply_markup=alerts_menu_keyboard())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤.")


@router.callback_query(F.data == "current_alerts")
async def handle_current_alerts(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    chat_id = callback.message.chat.id
    alerts = await get_alerts(chat_id)
    if not alerts:
        await callback.message.answer(
            "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. üòî",
            reply_markup=alerts_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã –≤ —á–∞—Ç–µ {chat_id} (–ø—É—Å—Ç–æ).")
        await callback.answer()
        return

    formatted_alerts, total_pages = format_alerts(alerts, page=1)
    try:
        await callback.message.edit_text(
            formatted_alerts,
            reply_markup=alerts_menu_keyboard(current_page=1, total_pages=total_pages)
        )
    except TelegramAPIError as e:
         if "message is not modified" not in str(e): logger.error(f"Error editing current alerts message: {e}")

    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã –≤ —á–∞—Ç–µ {chat_id} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1).")


@router.message(AlertState.removing_alert)
async def handle_remove_alert_id(message: Message, state: FSMContext):
    if not await is_user_allowed(message): return
    chat_id = message.chat.id
    user_id = message.from_user.id
    try:
        alert_id_to_remove = int(message.text)
        alerts_in_chat = await get_alerts(chat_id)
        alert_exists = False
        for alert in alerts_in_chat:
            if alert[0] == alert_id_to_remove:
                 alert_exists = True
                 break

        if not alert_exists:
            await message.answer(
                f"–ê–ª–µ—Ä—Ç —Å ID {alert_id_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
                reply_markup=alerts_menu_keyboard()
            )
            await state.clear() # Clear state even if not found
            logger.warning(f"–ê–ª–µ—Ä—Ç ID {alert_id_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id} (–ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id})")
            return

        await remove_alert(alert_id_to_remove)
        await message.answer(f"–ê–ª–µ—Ä—Ç ID {alert_id_to_remove} —É–¥–∞–ª–µ–Ω.", reply_markup=alerts_menu_keyboard())
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∞–ª–µ—Ä—Ç ID {alert_id_to_remove} –∏–∑ —á–∞—Ç–∞ {chat_id}")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∞–ª–µ—Ä—Ç–∞.", reply_markup=alerts_menu_keyboard())
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–ª–µ—Ä—Ç–∞: {message.text} –≤ —á–∞—Ç–µ {chat_id}")

    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞ {message.text} –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞.", reply_markup=alerts_menu_keyboard())
         await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤.
@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    await state.clear()
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    chat_type = callback.message.chat.type
    is_admin = await is_user_admin(chat_id, user_id) if chat_type != 'private' else False
    try:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(chat_type, is_admin))
    except TelegramAPIError as e:
        if "message is not modified" not in str(e): logger.error(f"Error editing main menu message: {e}")
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@router.callback_query(F.data == "portfolio_prices")
async def handle_portfolio_prices(callback: CallbackQuery):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    portfolio_data = await get_portfolio(user_id)
    if not portfolio_data:
        await callback.message.answer(
            "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–µ–π—á–∞—Å –ø—É—Å—Ç. üòî",
            reply_markup=quotes_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ü–µ–Ω—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ø—É—Å—Ç–æ–π).")
        await callback.answer()
        return

    portfolio_with_prices = []
    tasks = []
    asset_symbols = []

    for sub_account, assets in portfolio_data.items():
         for asset in assets:
            try:
                symbol = asset['symbol']
                asset_type = asset['asset_type']
                tasks.append(fetch_asset_price_with_retry(symbol, asset_type))
                asset_symbols.append(symbol)
            except (KeyError, ValueError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∞ –≤ handle_portfolio_prices: {asset}. –û—à–∏–±–∫–∞: {e}")

    if not tasks:
        await callback.message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω.", reply_markup=quotes_menu_keyboard())
        await callback.answer()
        return

    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω –¥–ª—è {len(tasks)} –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ü–µ–Ω –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
    current_prices = await asyncio.gather(*tasks)
    logger.info("–¶–µ–Ω—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ü–µ–Ω –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã.")

    for i, price in enumerate(current_prices):
         portfolio_with_prices.append({'symbol': asset_symbols[i], 'current_price': price})


    formatted_market = format_market_prices(portfolio_with_prices)
    try:
        await callback.message.edit_text(formatted_market, reply_markup=quotes_menu_keyboard())
    except TelegramAPIError as e:
         if "message is not modified" not in str(e): logger.error(f"Error editing portfolio prices message: {e}")
         else: # If not modified, still answer
              pass
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ü–µ–Ω—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è.")


@router.callback_query(F.data.startswith("alerts_page_"))
async def handle_alerts_page(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    page = int(callback.data.replace("alerts_page_", ""))
    chat_id = callback.message.chat.id
    alerts = await get_alerts(chat_id)
    if not alerts:
        await callback.message.answer(
            "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. üòî",
            reply_markup=alerts_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã –≤ —á–∞—Ç–µ {chat_id} (–ø—É—Å—Ç–æ).")
        await callback.answer()
        return

    formatted_alerts, total_pages = format_alerts(alerts, page=page)

    if page < 1 or page > total_pages:
         await callback.answer(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}", show_alert=True)
         return

    try:
        await callback.message.edit_text(
            formatted_alerts,
            reply_markup=alerts_menu_keyboard(current_page=page, total_pages=total_pages)
        )
    except TelegramAPIError as e:
         if "message is not modified" not in str(e): logger.error(f"Error editing alerts page message: {e}")

    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–ª–µ—Ä—Ç–æ–≤ {page} –≤ —á–∞—Ç–µ {chat_id}.")


@router.callback_query(lambda c: c.data.startswith("calendar_category_"))
async def handle_category_selection(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    try:
        category = callback.data.split("_")[-1]
        await state.update_data(category=category, current_page=1) # Reset page on category change

        portfolio_symbols = set()
        if category == "portfolio":
            portfolio_data = await get_portfolio(user_id)
            for sub_account, assets in portfolio_data.items():
                for asset in assets:
                     portfolio_symbols.add(asset['symbol'])
            if not portfolio_symbols:
                 await callback.message.edit_text("–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç, –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é.", reply_markup=get_category_keyboard())
                 await callback.answer()
                 return


        events = await get_events(user_id=user_id, event_type=None, portfolio_only=(category == "portfolio")) # Get all types initially, filter later if needed

        if not events: # Fallback to sample if DB is empty
             logger.warning("No events found in DB, falling back to sample events for calendar.")
             events = get_sample_events() # This returns raw dicts, need to convert format if DB returns tuples
             # Convert sample events format if necessary, assuming DB returns tuples like (id, date, title, desc, src, type, sym)
             events_tuples = []
             for i, e in enumerate(events):
                  events_tuples.append(
                      (i + 1, e["event_date"], e["title"], e["description"], e["source"], e["type"], e["symbol"])
                  )
             events = events_tuples


        filtered_events = []
        if category == "all":
            filtered_events = events
        elif category == "portfolio":
            filtered_events = [e for e in events if e[6] in portfolio_symbols] # index 6 is symbol
        elif category == "macro":
            filtered_events = [e for e in events if e[5] == "macro"] # index 5 is type
        elif category == "dividends":
            filtered_events = [e for e in events if e[5] == "dividends"]
        elif category == "earnings":
            filtered_events = [e for e in events if e[5] == "earnings"]
        elif category == "press":
            filtered_events = [e for e in events if e[5] == "press"]
        else: # Default to all if category unknown
            filtered_events = events


        filtered_events = sorted(
            filtered_events,
            key=lambda x: datetime.strptime(x[1], "%Y-%m-%d %H:%M:%S") # index 1 is date
        )


        if not filtered_events:
            category_display = EVENT_TYPES.get(category, category.capitalize()) if category != "portfolio" else "–ü–æ—Ä—Ç—Ñ–µ–ª—å"
            await callback.message.edit_text(
                f"–°–æ–±—ã—Ç–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_display}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_category_keyboard()
            )
            await callback.answer()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–±—ã—Ç–∏—è (–ø—É—Å—Ç–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).")
            return

        await state.update_data(filtered_events=filtered_events) # Store filtered list for pagination

        text, total_pages = format_events(filtered_events, page=1) # Format page 1
        keyboard = pagination_keyboard(1, total_pages, "calendar") # Use generic pagination

        category_display = EVENT_TYPES.get(category, category.capitalize()) if category != "portfolio" else "–ü–æ—Ä—Ç—Ñ–µ–ª—å"

        try:
            await callback.message.edit_text(
                f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å ({category_display}):\n\n{text}",
                reply_markup=keyboard
            )
        except TelegramAPIError as e:
             if "message is not modified" not in str(e): logger.error(f"Error editing calendar category selection message: {e}")

        await state.update_data(total_pages=total_pages)
        await callback.answer()
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–±—ã—Ç–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1, —Å–æ–±—ã—Ç–∏–π: {len(filtered_events)}).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=get_category_keyboard() # Back to category selection
        )
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
@router.callback_query(F.data.startswith("calendar_page_"))
async def handle_calendar_page(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id

    try:
        page = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        logger.error(f"Invalid calendar pagination callback: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
        return

    try:
        data = await state.get_data()
        filtered_events = data.get("filtered_events")
        category = data.get("category", "all") # Get category from state
        total_pages_state = data.get("total_pages")

        if filtered_events is None:
            logger.warning(f"No filtered_events in state for user {user_id} on calendar pagination. Re-filtering.")
            await handle_category_selection(callback, state)
            return

        if page < 1 or (total_pages_state and page > total_pages_state):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.", show_alert=True)
            return


        formatted_events, total_pages = format_events(filtered_events, page=page)
        new_markup = pagination_keyboard(current_page=page, total_pages=total_pages, prefix="calendar")
        category_display = EVENT_TYPES.get(category, category.capitalize()) if category != "portfolio" else "–ü–æ—Ä—Ç—Ñ–µ–ª—å"

        try:
            await callback.message.edit_text(
                f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å ({category_display}):\n\n{formatted_events}",
                reply_markup=new_markup
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e): logger.error(f"Error editing calendar page message: {e}")

        await state.update_data(current_page=page) # Update current page in state
        await callback.answer()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è {page} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.",
            reply_markup=get_category_keyboard()
        )
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.message(Command("load_sample_events"))
async def load_sample_events_handler(message: types.Message):
    if not await is_user_allowed(message): return
    try:
        await load_sample_events()
        await message.answer("–ü—Ä–∏–º–µ—Ä —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ö–∞–ª–µ–Ω–¥–∞—Ä—å' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–±—ã—Ç–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–±—ã—Ç–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ.
@router.callback_query(lambda c: c.data.startswith("calendar_category_"))
async def handle_category_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    try:
        category = callback.data.split("_")[-1]
        await state.update_data(category=category, current_page=1)

        all_events = get_sample_events()

        crypto_symbols = {"BTC", "ETH", "BNB", "XRP", "ADA", "SOL", "DOGE", "DOT", "LTC", "LINK"}
        investment_symbols = {"AAPL", "MSFT", "AMZN", "GOOGL", "TSLA", "NVDA", "JPM", "GS", "V", "MA"}

        if category == "crypto":
            filtered_events = [e for e in all_events if
                               e['symbol'] in crypto_symbols or
                               (e['symbol'] == "-" and e['type'] in ["macro", "press"])]
        elif category == "investments":
            filtered_events = [e for e in all_events if
                               e['symbol'] in investment_symbols or
                               (e['symbol'] == "-" and e['type'] in ["macro", "earnings"])]
        else:
            filtered_events = all_events

        filtered_events = sorted(
            filtered_events,
            key=lambda x: datetime.strptime(x['event_date'], "%Y-%m-%d %H:%M:%S")
        )

        if not filtered_events:
            await callback.message.edit_text(
                "–°–æ–±—ã—Ç–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç.",
                reply_markup=calendar_menu_keyboard()
            )
            await callback.answer()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–±—ã—Ç–∏—è (–ø—É—Å—Ç–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).")
            return

        await state.update_data(filtered_events=filtered_events)

        text, total_pages = format_events(filtered_events, page=1)
        keyboard = get_pagination_keyboard(1, total_pages, category)

        category_display = {
            "crypto": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
            "investments": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
            "all": "–í—Å–µ —Å–æ–±—ã—Ç–∏—è"
        }.get(category, "–í—Å–µ —Å–æ–±—ã—Ç–∏—è")

        await callback.message.edit_text(
            f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π ({category_display}):\n\n{text}",
            reply_markup=keyboard
        )
        await state.update_data(total_pages=total_pages)
        await callback.answer()
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–±—ã—Ç–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1, —Å–æ–±—ã—Ç–∏–π: {len(filtered_events)}).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=calendar_menu_keyboard()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.
@router.callback_query(lambda c: c.data.startswith("calendar_prev_") or c.data.startswith("calendar_next_"))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    current_message_text = callback.message.text
    current_reply_markup = callback.message.reply_markup

    try:
        data = await state.get_data()
        filter_type = data.get("calendar_filter", "all")
        filtered_events = data.get("filtered_events", [])
        current_page = data.get("current_page", 1)
        total_pages = data.get("total_pages", 1)

        action = callback.data.split("_")[1]
        new_page = current_page - 1 if action == "prev" else current_page + 1

        if new_page < 1 or new_page > total_pages:
            await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü.")
            return

        if not filtered_events:
            portfolio_only = filter_type == "portfolio"
            event_type = None
            if filter_type == "macro":
                event_type = "macro"
            elif filter_type == "dividends":
                event_type = "dividends"
            elif filter_type == "earnings":
                event_type = "earnings"
            elif filter_type == "press":
                event_type = "press"
            elif filter_type == "all":
                event_type = None
                portfolio_only = False

            filtered_events = await get_events(user_id=user_id, event_type=event_type, portfolio_only=portfolio_only)
            if not filtered_events:
                all_events = get_sample_events()
                crypto_symbols = {"BTC", "ETH", "BNB", "XRP", "ADA", "SOL", "DOGE", "DOT", "LTC", "LINK"}
                investment_symbols = {"AAPL", "MSFT", "AMZN", "GOOGL", "TSLA", "NVDA", "JPM", "GS", "V", "MA"}

                if filter_type == "portfolio":
                    portfolio = await get_portfolio(user_id)
                    portfolio_symbols = {asset['symbol'] for asset in portfolio}
                    filtered_events = [e for e in all_events if e['symbol'] in portfolio_symbols]
                elif filter_type == "macro":
                    filtered_events = [e for e in all_events if e['type'] == "macro"]
                elif filter_type == "dividends":
                    filtered_events = [e for e in all_events if e['type'] == "dividends"]
                elif filter_type == "earnings":
                    filtered_events = [e for e in all_events if e['type'] == "earnings"]
                elif filter_type == "press":
                    filtered_events = [e for e in all_events if e['type'] == "press"]
                elif filter_type == "all":
                    filtered_events = all_events

            if not filtered_events:
                new_text = f"–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞: {filter_type}"
                new_markup = calendar_menu_keyboard()

                if current_message_text != new_text or str(current_reply_markup) != str(new_markup):
                    await callback.message.edit_text(
                        new_text,
                        reply_markup=new_markup
                    )
                await callback.answer()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞–≥–∏–Ω–∞—Ü–∏—é (–ø—É—Å—Ç–æ, —Ñ–∏–ª—å—Ç—Ä: {filter_type}).")
                return

            await state.update_data(filtered_events=filtered_events)

        formatted_events, total_pages = format_events(filtered_events, page=new_page)
        new_markup = pagination_keyboard(current_page=new_page, total_pages=total_pages, prefix="calendar")

        if current_message_text != formatted_events or str(current_reply_markup) != str(new_markup):
            await callback.message.edit_text(
                formatted_events,
                reply_markup=new_markup
            )
        await state.update_data(current_page=new_page, total_pages=total_pages)
        await callback.answer()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è {new_page} (—Ñ–∏–ª—å—Ç—Ä: {filter_type}).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."
        if current_message_text != error_text:
            await callback.message.edit_text(
                error_text,
                reply_markup=calendar_menu_keyboard()
            )
        await callback.answer()

async def is_user_allowed(message_or_callback: Union[Message, CallbackQuery]) -> bool:
    is_message = isinstance(message_or_callback, Message)
    chat = message_or_callback.chat if is_message else message_or_callback.message.chat
    user = message_or_callback.from_user

    if chat.type == 'private':
        return True

    if chat.type in ['group', 'supergroup']:
        chat_id = chat.id
        user_id = user.id
        allow_all, = await get_or_create_chat_settings(chat_id)

        if allow_all:
            return True
        else:
            try:
                is_admin_user = await is_user_admin(chat_id, user_id)
                if is_admin_user:
                    return True
                else:
                    if is_message:
                        await message_or_callback.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", disable_notification=True)
                    else:
                        await message_or_callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)

                    logger.info(f"User {user_id} denied access in group {chat_id} (not admin).")
                    return False
            except Exception as e:
                logger.error(f"Error checking chat member status for user {user_id} in chat {chat_id}: {e}")
                if is_message:
                    await message_or_callback.reply("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", disable_notification=True)
                else:
                    await message_or_callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤.", show_alert=True)
                return False
    return False

async def is_user_admin(chat_id: int, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in ['administrator', 'creator']
    except Exception as e:
        logger.error(f"Error checking admin status for user {user_id} in chat {chat_id}: {e}")
        return False

@router.message(Command("settings"))
async def cmd_settings(message: Message):

    user_id = message.from_user.id
    chat_id = message.chat.id

    if message.chat.type == 'private':
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        logger.info(f"User {user_id} tried /settings in private chat {chat_id}.")
        return

    # Check if user invoking the command is allowed (admin check is inside this)
    if not await is_user_allowed(message): return

    can_change = await is_user_admin(chat_id, user_id) # is_user_allowed already confirmed admin if needed, but check again for safety

    allow_all, = await get_or_create_chat_settings(chat_id)
    setting_text = "–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" if allow_all else "–†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"

    info_text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞:\n\n" \
                f"–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: *{setting_text}*\n\n" \
                f"–ö—Ç–æ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã/–Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ?"

    reply_markup = settings_keyboard(chat_id, allow_all) if can_change else None

    if not can_change:
        info_text += "\n\n_(–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.)_"

    await message.answer(info_text, reply_markup=reply_markup, parse_mode="Markdown")
    logger.info(f"User {user_id} viewed settings in group {chat_id} (Admin: {can_change}).")

@router.callback_query(F.data.startswith("settings_set_"))
async def handle_settings_change(callback: CallbackQuery):

    user_id = callback.from_user.id
    try:
        parts = callback.data.split('_')
        action = parts[2] # all or admins
        chat_id = int(parts[3])
    except (IndexError, ValueError):
        logger.error(f"Invalid settings callback data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    # Check if the user clicking the button is allowed (admin check is inside)
    if not await is_user_allowed(callback): return

    # Double check if the user initiating the change is still an admin
    if not await is_user_admin(chat_id, user_id):
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
        logger.warning(f"User {user_id} (no longer admin?) tried to change settings via callback in group {chat_id}.")
        return

    new_allow_all = (action == "all")

    try:
        await update_chat_settings(chat_id, new_allow_all)
        setting_text = "–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" if new_allow_all else "–†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
        new_info_text = (
             f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞:\n\n"
            f"–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: *{setting_text}*\n\n"
            f"–ö—Ç–æ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã/–Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ?"
        )
        new_reply_markup = settings_keyboard(chat_id, new_allow_all)

        if callback.message.text != new_info_text or str(callback.message.reply_markup) != str(new_reply_markup):
             await callback.message.edit_text(
                 new_info_text,
                 reply_markup=new_reply_markup,
                 parse_mode="Markdown"
             )
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.info(f"Admin {user_id} changed settings in group {chat_id} to allow_all={new_allow_all}.")
    except TelegramAPIError as e:
        if "message is not modified" not in str(e): logger.error(f"Error editing settings change message: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True) # Inform user even if no edit
    except Exception as e:
        logger.error(f"Failed to update settings for chat {chat_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)


@router.callback_query(PortfolioState.viewing_portfolio, F.data.startswith("p_sw_"))
async def handle_portfolio_switch_sub_account(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    target_sub_account = callback.data.replace("p_sw_", "")


    await display_portfolio(callback, state, user_id, target_sub_account, page=1)

    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å—É–±-—Å—á–µ—Ç '{target_sub_account}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1).")


@router.callback_query(PortfolioState.viewing_portfolio, F.data.startswith("p_pg_"))
async def handle_portfolio_sub_account_page(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    try:
        parts = callback.data.split("_")
        # p_pg_SUBNAME_PAGE -> parts[-1]=PAGE, parts[2:-1]=SUBNAME
        page = int(parts[-1])
        sub_account = "_".join(parts[2:-1])
        if not sub_account: raise IndexError("Sub-account name missing")
    except (ValueError, IndexError):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
        return

    state_data = await state.get_data()
    current_sub_account_state = state_data.get("current_sub_account")


    if sub_account != current_sub_account_state:
        logger.warning(f"–ó–∞–ø—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è '{sub_account}', –Ω–æ —Ç–µ–∫—É—â–∏–π —Å—É–±-—Å—á–µ—Ç '{current_sub_account_state}'. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è.")
        target_sub_account = sub_account # Switch to the requested sub-account
    else:
         target_sub_account = current_sub_account_state

    # Fetch portfolio data again to ensure it's current (might have changed since last view)
    portfolio_data = await get_portfolio(user_id)
    assets_in_current_sub = portfolio_data.get(target_sub_account, [])
    items_per_page=4
    total_pages = (len(assets_in_current_sub) + items_per_page - 1) // items_per_page if assets_in_current_sub else 0


    if page < 1 or (total_pages > 0 and page > total_pages):
        logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –¥–ª—è —Å—É–±-—Å—á–µ—Ç–∞ '{target_sub_account}'. –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}.")
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.", show_alert=True)
        return


    await display_portfolio(callback, state, user_id, target_sub_account, page=page)

    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} —Å—É–±-—Å—á–µ—Ç–∞ '{target_sub_account}'.")

@router.callback_query(F.data.startswith("p_add_"))
async def handle_add_asset_start(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    target_sub_account = callback.data.replace("p_add_", "")

    user_id = callback.from_user.id
    sub_accounts = await get_sub_accounts(user_id)
    if target_sub_account not in sub_accounts:
        pass

    await state.update_data(target_sub_account=target_sub_account)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(PortfolioState.adding_asset_type)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –≤ —Å—É–±-—Å—á–µ—Ç '{target_sub_account}'.")

@router.callback_query(F.data.startswith("p_rm_"))
async def handle_remove_asset_start(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    target_sub_account = callback.data.replace("p_rm_", "")
    user_id = callback.from_user.id

    portfolio_data = await get_portfolio(user_id)
    assets_in_sub_account = portfolio_data.get(target_sub_account, [])

    if not assets_in_sub_account:
        await callback.answer(f"–í —Å—É–±-—Å—á–µ—Ç–µ '{target_sub_account}' –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return

    await state.update_data(target_sub_account=target_sub_account)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—É–±-—Å—á–µ—Ç–∞ '{target_sub_account}':")
    await state.set_state(PortfolioState.removing_symbol)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –∏–∑ —Å—É–±-—Å—á–µ—Ç–∞ '{target_sub_account}'.")


@router.callback_query(F.data == "cancel_remove")
async def handle_cancel_remove(callback: CallbackQuery, state: FSMContext):
    if not await is_user_allowed(callback): return
    user_id = callback.from_user.id
    data = await state.get_data()
    target_sub_account = data.get("target_sub_account", "–û—Å–Ω–æ–≤–Ω–æ–π") # Default if state was weird


    await display_portfolio(callback, state, user_id, target_sub_account, page=1)

    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞.")