from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from loguru import logger
from keyboards import main_menu, asset_type_keyboard, alert_condition_keyboard, alert_actions_keyboard, \
    portfolio_actions_keyboard, confirm_alert_keyboard, confirm_remove_asset_keyboard, alerts_menu_keyboard, \
    quotes_menu_keyboard, calendar_menu_keyboard, pagination_keyboard
from states import PortfolioState, AlertState
from database import add_to_portfolio, get_portfolio, remove_from_portfolio, add_alert, get_alerts, remove_alert, \
    get_events
from api import get_stock_price, get_crypto_price, fetch_asset_price, get_stock_history, get_crypto_history, \
    get_stock_price_with_retry, get_market_data
from utils import format_portfolio, format_alerts, format_events, format_market_prices, format_market_overview

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = """
üìã *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é  
/quotes - –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏  
/set_alert - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã  
/alerts - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
/remove_alert - –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç
/add_to_portfolio - –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ  
/remove_from_portfolio - –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ  
/portfolio - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ  
/market - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤ –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ  
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å

üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*  
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_to_portfolio –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ  
2. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove_from_portfolio  
3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –ø–æ–º–æ—â—å—é /portfolio  
4. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ /market  
"""
    try:
        await message.answer(help_text, parse_mode=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–º–æ—â–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start, /help, /quote, /set_alert, /add_asset, /remove_asset, /portfolio, /market",
            parse_mode=None
        )

@router.message(Command("quotes"))
async def cmd_quotes(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quotes –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(PortfolioState.selecting_asset_type)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ—Ç–∏—Ä–æ–≤–∫–∏.")

@router.callback_query(PortfolioState.selecting_asset_type)
async def select_asset_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫."""
    await state.update_data(asset_type=callback.data)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT):")
    await state.set_state(PortfolioState.selecting_symbol)
    await callback.answer()

@router.message(PortfolioState.selecting_symbol)
async def get_quote(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫."""
    symbol = message.text.strip().upper()
    data = await state.get_data()
    asset_type = data["asset_type"]

    if symbol.startswith('/'):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT), –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É."
        )
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞: {symbol}")
        return

    price = None
    if asset_type == "stock":
        if not symbol.isalpha() and not symbol.endswith(".ME"):
            await message.answer(
                "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª, —Å–æ—Å—Ç–æ—è—â–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL) –∏–ª–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º .ME (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.ME)."
            )
            await state.clear()
            logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏: {symbol}")
            return
        price = await get_stock_price(symbol)
    elif asset_type == "crypto":
        if '/' not in symbol:
            await message.answer(
                "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BTC/USDT'."
            )
            await state.clear()
            logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {symbol}")
            return
        price = await get_crypto_price(symbol)

    if price is not None:
        await message.answer(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: ${price:.2f}")
    else:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API, "
            "—Å–∏–º–≤–æ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    await state.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ü–µ–Ω—É {symbol} ({asset_type}).")

@router.message(Command("portfolio"))
async def cmd_portfolio(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è."""
    portfolio = await get_portfolio(message.from_user.id)

    if not portfolio:
        await message.answer(
            "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–µ–π—á–∞—Å –ø—É—Å—Ç. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_to_portfolio, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å."
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Ä—Ç—Ñ–µ–ª—å (–ø—É—Å—Ç–æ–π).")
        return

    portfolio_with_prices = []
    for asset in portfolio:
        try:
            symbol = asset['symbol']
            asset_type = asset['asset_type']
            amount = asset['amount']
            purchase_price = asset['purchase_price']

            current_price = await fetch_asset_price(symbol, asset_type)
            asset_data = {
                'symbol': symbol,
                'asset_type': asset_type,
                'amount': amount,
                'purchase_price': purchase_price,
                'current_price': current_price
            }
            portfolio_with_prices.append(asset_data)
        except KeyError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞: {asset}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
            continue

    formatted_portfolio = format_portfolio(portfolio_with_prices)
    await message.answer(formatted_portfolio)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Ä—Ç—Ñ–µ–ª—å.")

@router.message(Command("add_to_portfolio"))
async def cmd_add_to_portfolio(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_to_portfolio –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(PortfolioState.adding_asset_type)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.")

@router.callback_query(PortfolioState.adding_asset_type)
async def add_asset_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å."""
    await state.update_data(asset_type=callback.data)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT):")
    await state.set_state(PortfolioState.adding_symbol)
    await callback.answer()

@router.message(PortfolioState.selecting_symbol)
async def get_quote(message: Message, state: FSMContext):
    symbol = message.text.strip().upper()
    data = await state.get_data()
    asset_type = data["asset_type"]

    # ... (–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞)

    price = None
    try:
        if asset_type == "stock":
            price = await get_stock_price_with_retry(symbol)
        elif asset_type == "crypto":
            price = await get_crypto_price(symbol)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
        return

    if price is not None:
        await message.answer(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: ${price:.2f}")
    else:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    await state.clear()

@router.message(PortfolioState.adding_symbol)
async def add_symbol(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å."""
    user_id = message.from_user.id
    symbol = message.text.strip().upper()
    data = await state.get_data()
    asset_type = data["asset_type"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π
    if symbol.startswith('/'):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT), –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É."
        )
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞: {symbol}")
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
    if asset_type == "stock":
        if not symbol.isalpha() and not symbol.endswith(".ME"):
            await message.answer(
                "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª, —Å–æ—Å—Ç–æ—è—â–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL) –∏–ª–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º .ME (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.ME)."
            )
            await state.clear()
            logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏: {symbol}")
            return
    elif asset_type == "crypto":
        if '/' not in symbol:
            await message.answer(
                "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BTC/USDT'."
            )
            await state.clear()
            logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {symbol}")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ —á–µ—Ä–µ–∑ API
    price = await fetch_asset_price(symbol, asset_type)
    if price is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å–∏–º–≤–æ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {symbol} ({asset_type})")
        return

    await state.update_data(symbol=symbol)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞:")
    await state.set_state(PortfolioState.adding_amount)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–∏–º–≤–æ–ª {symbol} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.")

@router.message(PortfolioState.adding_amount)
async def add_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞."""
    user_id = message.from_user.id
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(amount=amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏:")
        await state.set_state(PortfolioState.adding_price)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞: {message.text}")

@router.message(PortfolioState.adding_price)
async def add_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏."""
    user_id = message.from_user.id
    try:
        price = float(message.text)
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        data = await state.get_data()
        await add_to_portfolio(
            user_id=user_id,
            asset_type=data["asset_type"],
            symbol=data["symbol"],
            amount=data["amount"],
            purchase_price=price
        )
        await message.answer("–ê–∫—Ç–∏–≤ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å!", reply_markup=main_menu())
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å: {data['symbol']} ({data['asset_type']})")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É: {message.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )
        await state.clear()

@router.message(Command("set_alert"))
async def cmd_set_alert(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_alert –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–∞."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(AlertState.selecting_asset_type)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–ª–µ—Ä—Ç–∞.")

@router.callback_query(AlertState.selecting_asset_type)
async def select_alert_asset_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞."""
    await state.update_data(asset_type=callback.data)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT):")
    await state.set_state(AlertState.selecting_symbol)
    await callback.answer()

@router.message(AlertState.selecting_symbol)
async def select_alert_symbol(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞."""
    user_id = message.from_user.id
    symbol = message.text.strip().upper()
    data = await state.get_data()
    asset_type = data["asset_type"]

    if symbol.startswith('/'):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT), –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.",
            reply_markup=main_menu()
        )
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞: {symbol}")
        return

    if asset_type == "stock":
        if not symbol.isalpha() and not symbol.endswith(".ME"):
            await message.answer(
                "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª, —Å–æ—Å—Ç–æ—è—â–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL) –∏–ª–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º .ME (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.ME).",
                reply_markup=main_menu()
            )
            await state.clear()
            logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏: {symbol}")
            return
    elif asset_type == "crypto":
        if '/' not in symbol:
            await message.answer(
                "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BTC/USDT'.",
                reply_markup=main_menu()
            )
            await state.clear()
            logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {symbol}")
            return

    price = await fetch_asset_price(symbol, asset_type)
    if price is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å–∏–º–≤–æ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞: {symbol} ({asset_type})")
        return

    await state.update_data(symbol=symbol)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –∞–ª–µ—Ä—Ç–∞:")
    await state.set_state(AlertState.selecting_price)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–∏–º–≤–æ–ª {symbol} –¥–ª—è –∞–ª–µ—Ä—Ç–∞.")

@router.message(AlertState.selecting_price)
async def select_alert_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è –∞–ª–µ—Ä—Ç–∞."""
    user_id = message.from_user.id
    try:
        target_price = float(message.text)
        if target_price <= 0:
            await message.answer("–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=main_menu())
            return
        await state.update_data(target_price=target_price)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∞–ª–µ—Ä—Ç–∞:", reply_markup=alert_condition_keyboard())
        await state.set_state(AlertState.selecting_condition)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=main_menu())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É: {message.text}")

@router.callback_query(AlertState.selecting_condition, F.data.in_({"above", "below"}))
async def select_alert_condition(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏—è –∞–ª–µ—Ä—Ç–∞ (above –∏–ª–∏ below)."""
    condition = callback.data
    data = await state.get_data()
    symbol = data["symbol"]
    target_price = data["target_price"]
    await state.update_data(condition=condition)
    await callback.message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–ª–µ—Ä—Ç:\n"
        f"–ê–∫—Ç–∏–≤: {symbol}\n"
        f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${target_price:.2f}\n"
        f"–£—Å–ª–æ–≤–∏–µ: {'–≤—ã—à–µ' if condition == 'above' else '–Ω–∏–∂–µ'}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_alert"),
                InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ]
        ])
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —É—Å–ª–æ–≤–∏–µ –∞–ª–µ—Ä—Ç–∞: {condition}")

@router.message(Command("calendar"))
async def cmd_calendar(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /calendar –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ–±—ã—Ç–∏–π."""
    events = await get_events()
    if events:
        await message.answer(format_events(events))
    else:
        await message.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π.")

@router.message(Command("remove_from_portfolio"))
async def cmd_remove_from_portfolio(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_from_portfolio –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è."""
    user_id = message.from_user.id
    portfolio = await get_portfolio(user_id)

    if not portfolio:
        await message.answer(
            "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–µ–π—á–∞—Å –ø—É—Å—Ç. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_to_portfolio, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å."
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ (–ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç).")
        return

    formatted_portfolio = format_portfolio(portfolio)
    await message.answer(
        f"–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n{formatted_portfolio}\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT):"
    )
    await state.set_state(PortfolioState.removing_symbol)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")

@router.message(PortfolioState.removing_symbol)
async def remove_symbol_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è."""
    user_id = message.from_user.id
    symbol = message.text.strip().upper()

    if symbol.startswith('/'):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT), –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É."
        )
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞: {symbol}")
        return

    try:
        portfolio = await get_portfolio(user_id)
        asset_exists = any(asset['symbol'] == symbol for asset in portfolio)

        if not asset_exists:
            await message.answer(
                f"–ê–∫—Ç–∏–≤ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await state.clear()
            logger.warning(f"–ê–∫—Ç–∏–≤ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        await remove_from_portfolio(user_id, symbol)
        await message.answer(f"–ê–∫—Ç–∏–≤ {symbol} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∞–∫—Ç–∏–≤ {symbol} –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞ {symbol} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        await state.clear()

@router.message(Command("market"))
async def cmd_market(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /market –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω."""
    user_id = message.from_user.id
    portfolio = await get_portfolio(user_id)

    if not portfolio:
        await message.answer(
            "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–µ–π—á–∞—Å –ø—É—Å—Ç. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_to_portfolio, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å."
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã (–ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç).")
        return

    portfolio_with_prices = []
    for asset in portfolio:
        try:
            symbol = asset['symbol']
            asset_type = asset['asset_type']
            current_price = await fetch_asset_price(symbol, asset_type)
            asset_data = {
                'symbol': symbol,
                'asset_type': asset_type,
                'current_price': current_price
            }
            portfolio_with_prices.append(asset_data)
        except KeyError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞: {asset}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
            continue

    formatted_prices = format_market_prices(portfolio_with_prices)
    await message.answer(formatted_prices)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã.")

def register_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤."""
    dp.include_router(router)

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.")

@router.message(Command("alerts"))
async def cmd_alerts(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alerts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤."""
    user_id = message.from_user.id
    alerts = await get_alerts(user_id)

    if not alerts:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_alert, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç."
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–ª–µ—Ä—Ç—ã (—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç).")
        return

    formatted_alerts = format_alerts(alerts)
    await message.answer(formatted_alerts)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤.")

@router.message(Command("remove_alert"))
async def cmd_remove_alert(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_alert –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞."""
    user_id = message.from_user.id
    alerts = await get_alerts(user_id)

    if not alerts:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_alert, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç."
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ (—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç).")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–ª–µ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å –ø–æ–º–æ—â—å—é /alerts."
    )
    await state.set_state(AlertState.removing_alert)

@router.message(AlertState.removing_alert)
async def remove_alert_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    user_id = message.from_user.id
    try:
        alert_id = int(message.text)
        alerts = await get_alerts(user_id)
        alert_ids = [alert[0] for alert in alerts]  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–ª–µ—Ä—Ç–æ–≤

        if alert_id not in alert_ids:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–ª–µ—Ä—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /alerts –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await state.clear()
            return

        await remove_alert(alert_id, user_id)
        await message.answer(f"–ê–ª–µ—Ä—Ç —Å ID {alert_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∞–ª–µ—Ä—Ç —Å ID {alert_id}.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∞–ª–µ—Ä—Ç–∞.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        await state.clear()

@router.callback_query(F.data == "quotes_menu")
async def handle_quotes_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ—Ç–∏—Ä–æ–≤–∫–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏:", reply_markup=quotes_menu_keyboard())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.")

@router.callback_query(F.data == "quotes")
async def handle_quotes(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É'."""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(PortfolioState.selecting_asset_type)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ—Ç–∏—Ä–æ–≤–∫–∏.")

@router.callback_query(F.data == "portfolio")
async def handle_portfolio(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Ä—Ç—Ñ–µ–ª—å'."""
    portfolio = await get_portfolio(callback.from_user.id)
    if not portfolio:
        await callback.message.answer(
            "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–µ–π—á–∞—Å –ø—É—Å—Ç. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.",
            reply_markup=main_menu()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Ä—Ç—Ñ–µ–ª—å (–ø—É—Å—Ç–æ–π).")
        return

    portfolio_with_prices = []
    for asset in portfolio:
        try:
            symbol = asset['symbol']
            asset_type = asset['asset_type']
            amount = asset['amount']
            purchase_price = asset['purchase_price']
            current_price = await fetch_asset_price(symbol, asset_type)
            asset_data = {
                'symbol': symbol,
                'asset_type': asset_type,
                'amount': amount,
                'purchase_price': purchase_price,
                'current_price': current_price
            }
            portfolio_with_prices.append(asset_data)
        except KeyError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞: {asset}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
            continue

    formatted_portfolio, total_pages = format_portfolio(portfolio_with_prices, page=1)
    await callback.message.answer(
        formatted_portfolio,
        reply_markup=portfolio_actions_keyboard(current_page=1, total_pages=total_pages)
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Ä—Ç—Ñ–µ–ª—å (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1).")

@router.callback_query(F.data == "add_to_portfolio")
async def handle_add_to_portfolio(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤'."""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(PortfolioState.adding_asset_type)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.")

@router.callback_query(F.data == "set_alert")
async def handle_set_alert(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç'."""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞:", reply_markup=asset_type_keyboard())
    await state.set_state(AlertState.selecting_asset_type)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–ª–µ—Ä—Ç–∞.")

@router.callback_query(F.data == "calendar")
async def handle_calendar_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏–π:", reply_markup=calendar_menu_keyboard())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")

@router.callback_query(F.data == "help")
async def handle_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'."""
    help_text = """
üìã *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:*

- üìà –ö–æ—Ç–∏—Ä–æ–≤–∫–∏: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞
- üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
- ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤: –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å
- üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ
- üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π
- üìä –†—ã–Ω–æ–∫: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤
- üö´ –û—Ç–º–µ–Ω–∞: –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.
3. –î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.
"""
    await callback.message.answer(help_text, reply_markup=main_menu())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")

@router.callback_query(F.data == "market")
async def handle_market_overview(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†—ã–Ω–æ–∫' –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞."""
    market_data = await get_market_data()
    formatted_market = format_market_overview(market_data)
    await callback.message.answer(formatted_market, reply_markup=main_menu())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞.")

@router.callback_query(F.data == "remove_asset")
async def handle_remove_asset_prompt(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤'."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT):")
    await state.set_state(PortfolioState.removing_symbol)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞.")

@router.callback_query(F.data == "alerts")
async def handle_alerts(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–ª–µ—Ä—Ç—ã'."""
    alerts = await get_alerts(callback.from_user.id)
    if not alerts:
        await callback.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç.",
            reply_markup=main_menu()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–ª–µ—Ä—Ç—ã (–ø—É—Å—Ç–æ).")
        return

    formatted_alerts = format_alerts(alerts)
    for alert in alerts:
        alert_id = alert[0]
        await callback.message.answer(
            formatted_alerts,
            reply_markup=alert_actions_keyboard(alert_id)
        )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–ª–µ—Ä—Ç—ã.")

@router.callback_query(F.data == "remove_alert")
async def handle_remove_alert_prompt(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç'."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–ª–µ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(AlertState.removing_alert)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞.")

@router.callback_query(F.data == "confirm_alert")
async def confirm_alert(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞."""
    user_id = callback.from_user.id
    data = await state.get_data()
    symbol = data.get("symbol")
    target_price = data.get("target_price")
    condition = data.get("condition")
    asset_type = data.get("asset_type")

    if not all([symbol, target_price, condition, asset_type]):
        await callback.message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu()
        )
        await state.clear()
        await callback.answer()
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–ª–µ—Ä—Ç —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {data}")
        return

    await add_alert(user_id, asset_type, symbol, target_price, condition)
    await callback.message.answer(f"–ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}!", reply_markup=main_menu())
    await state.clear()
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∞–ª–µ—Ä—Ç –¥–ª—è {symbol}.")

@router.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'."""
    await state.clear()
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.")

@router.message(PortfolioState.removing_symbol)
async def handle_remove_asset_symbol(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞."""
    user_id = message.from_user.id
    symbol = message.text.strip().upper()

    if symbol.startswith('/'):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AAPL –∏–ª–∏ BTC/USDT), –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.",
            reply_markup=main_menu()
        )
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞: {symbol}")
        return

    portfolio = await get_portfolio(user_id)
    if not any(asset['symbol'] == symbol for asset in portfolio):
        await message.answer(
            f"–ê–∫—Ç–∏–≤ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ.",
            reply_markup=main_menu()
        )
        await state.clear()
        logger.warning(f"–ê–∫—Ç–∏–≤ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return

    await state.update_data(symbol=symbol)
    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ {symbol} –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è:",
        reply_markup=confirm_remove_asset_keyboard(symbol)
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞ {symbol}")

@router.callback_query(F.data.startswith("confirm_remove_"))
async def confirm_remove_asset(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞."""
    user_id = callback.from_user.id
    symbol = callback.data.replace("confirm_remove_", "")
    await remove_from_portfolio(user_id, symbol)
    await callback.message.answer(f"–ê–∫—Ç–∏–≤ {symbol} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.", reply_markup=main_menu())
    await state.clear()
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∞–∫—Ç–∏–≤ {symbol} –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")

@router.callback_query(F.data.in_({"quotes", "portfolio", "add_to_portfolio", "set_alert", "calendar", "help", "market"}))
async def handle_menu_command(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Å–±—Ä–∞—Å—ã–≤–∞—é—â–∏–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Å–±—Ä–æ—Å–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {callback.data}")

    command = callback.data
    if command == "quotes":
        await handle_quotes_menu(callback, state)
    elif command == "portfolio":
        await handle_portfolio(callback)
    elif command == "add_to_portfolio":
        await handle_add_to_portfolio(callback, state)
    elif command == "set_alert":
        await handle_set_alert(callback, state)
    elif command == "calendar":
        await handle_calendar_menu(callback)
    elif command == "help":
        await handle_help(callback)
    elif command == "market":
        await handle_market_overview(callback)

@router.callback_query(F.data == "alerts_menu")
async def handle_alerts_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–ª–µ—Ä—Ç—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–ª–µ—Ä—Ç–∞–º–∏:", reply_markup=alerts_menu_keyboard())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤.")

@router.callback_query(F.data == "current_alerts")
async def handle_current_alerts(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã'."""
    alerts = await get_alerts(callback.from_user.id)
    if not alerts:
        await callback.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç.",
            reply_markup=alerts_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã (–ø—É—Å—Ç–æ).")
        return

    formatted_alerts, total_pages = format_alerts(alerts, page=1)
    await callback.message.answer(
        formatted_alerts,
        reply_markup=alerts_menu_keyboard(current_page=1, total_pages=total_pages)
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1).")

@router.message(AlertState.removing_alert)
async def handle_remove_alert_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    user_id = message.from_user.id
    try:
        alert_id = int(message.text)
        alerts = await get_alerts(user_id)
        if not any(alert[0] == alert_id for alert in alerts):
            await message.answer(
                f"–ê–ª–µ—Ä—Ç ID {alert_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=alerts_menu_keyboard()
            )
            await state.clear()
            logger.warning(f"–ê–ª–µ—Ä—Ç ID {alert_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        await remove_alert(alert_id)
        await message.answer(f"–ê–ª–µ—Ä—Ç ID {alert_id} —É–¥–∞–ª–µ–Ω.", reply_markup=alerts_menu_keyboard())
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∞–ª–µ—Ä—Ç ID {alert_id}")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∞–ª–µ—Ä—Ç–∞.", reply_markup=alerts_menu_keyboard())
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–ª–µ—Ä—Ç–∞: {message.text}")

@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤."""
    await state.clear()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

@router.callback_query(F.data == "portfolio_prices")
async def handle_portfolio_prices(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¶–µ–Ω—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è'."""
    portfolio = await get_portfolio(callback.from_user.id)
    if not portfolio:
        await callback.message.answer(
            "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–µ–π—á–∞—Å –ø—É—Å—Ç. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.",
            reply_markup=quotes_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ü–µ–Ω—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ø—É—Å—Ç–æ–π).")
        return

    portfolio_with_prices = []
    for asset in portfolio:
        try:
            symbol = asset['symbol']
            asset_type = asset['asset_type']
            current_price = await fetch_asset_price(symbol, asset_type)
            asset_data = {
                'symbol': symbol,
                'asset_type': asset_type,
                'current_price': current_price
            }
            portfolio_with_prices.append(asset_data)
        except KeyError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞: {asset}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
            continue

    formatted_market = format_market_prices(portfolio_with_prices)
    await callback.message.answer(formatted_market, reply_markup=quotes_menu_keyboard())
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ü–µ–Ω—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è.")

@router.callback_query(F.data.startswith("portfolio_page_"))
async def handle_portfolio_page(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ—Ä—Ç—Ñ–µ–ª—è."""
    page = int(callback.data.replace("portfolio_page_", ""))
    portfolio = await get_portfolio(callback.from_user.id)
    if not portfolio:
        await callback.message.answer(
            "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–µ–π—á–∞—Å –ø—É—Å—Ç. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.",
            reply_markup=main_menu()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Ä—Ç—Ñ–µ–ª—å (–ø—É—Å—Ç–æ–π).")
        return

    portfolio_with_prices = []
    for asset in portfolio:
        try:
            symbol = asset['symbol']
            asset_type = asset['asset_type']
            amount = asset['amount']
            purchase_price = asset['purchase_price']
            current_price = await fetch_asset_price(symbol, asset_type)
            asset_data = {
                'symbol': symbol,
                'asset_type': asset_type,
                'amount': amount,
                'purchase_price': purchase_price,
                'current_price': current_price
            }
            portfolio_with_prices.append(asset_data)
        except KeyError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞: {asset}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
            continue

    formatted_portfolio, total_pages = format_portfolio(portfolio_with_prices, page=page)
    await callback.message.edit_text(
        formatted_portfolio,
        reply_markup=portfolio_actions_keyboard(current_page=page, total_pages=total_pages)
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Ä—Ç—Ñ–µ–ª—è {page}.")

@router.callback_query(F.data.startswith("alerts_page_"))
async def handle_alerts_page(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∞–ª–µ—Ä—Ç–æ–≤."""
    page = int(callback.data.replace("alerts_page_", ""))
    alerts = await get_alerts(callback.from_user.id)
    if not alerts:
        await callback.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. üòî\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç.",
            reply_markup=alerts_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã (–ø—É—Å—Ç–æ).")
        return

    formatted_alerts, total_pages = format_alerts(alerts, page=page)
    await callback.message.edit_text(
        formatted_alerts,
        reply_markup=alerts_menu_keyboard(current_page=page, total_pages=total_pages)
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–ª–µ—Ä—Ç–æ–≤ {page}.")

@router.callback_query(F.data.startswith("calendar_"))
async def handle_calendar_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π."""
    filter_type = callback.data.replace("calendar_", "")
    user_id = callback.from_user.id
    portfolio_only = filter_type == "portfolio"
    event_type = None

    if filter_type == "macro":
        event_type = "macro"
    elif filter_type == "dividends":
        event_type = "dividends"
    elif filter_type == "earnings":
        event_type = "earnings"
    elif filter_type == "press":
        event_type = "press"
    elif filter_type == "all":
        event_type = None
        portfolio_only = False

    events = await get_events(user_id=user_id, event_type=event_type, portfolio_only=portfolio_only)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_type}")
    if not events:
        await callback.message.answer(
            "–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–∑–∂–µ.",
            reply_markup=calendar_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–±—ã—Ç–∏—è (–ø—É—Å—Ç–æ, —Ñ–∏–ª—å—Ç—Ä: {filter_type}).")
        return

    formatted_events, total_pages = format_events(events, page=1)
    await callback.message.answer(
        formatted_events,
        reply_markup=pagination_keyboard(current_page=1, total_pages=total_pages, prefix="calendar")
    )
    await state.update_data(calendar_filter=filter_type)
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–±—ã—Ç–∏—è (—Ñ–∏–ª—å—Ç—Ä: {filter_type}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1, —Å–æ–±—ã—Ç–∏–π: {len(events)}).")

@router.callback_query(F.data.startswith("calendar_page_"))
async def handle_calendar_page(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    page = int(callback.data.replace("calendar_page_", ""))
    user_id = callback.from_user.id
    data = await state.get_data()
    filter_type = data.get("calendar_filter", "all")
    portfolio_only = filter_type == "portfolio"
    event_type = None

    if filter_type == "macro":
        event_type = "macro"
    elif filter_type == "dividends":
        event_type = "dividends"
    elif filter_type == "earnings":
        event_type = "earnings"
    elif filter_type == "press":
        event_type = "press"
    elif filter_type == "all":
        event_type = None
        portfolio_only = False

    events = await get_events(user_id=user_id, event_type=event_type, portfolio_only=portfolio_only)
    if not events:
        await callback.message.answer(
            "–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=calendar_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–±—ã—Ç–∏—è (–ø—É—Å—Ç–æ, —Ñ–∏–ª—å—Ç—Ä: {filter_type}).")
        return

    formatted_events, total_pages = format_events(events, page=page)
    await callback.message.edit_text(
        formatted_events,
        reply_markup=pagination_keyboard(current_page=page, total_pages=total_pages, prefix="calendar")
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è {page} (—Ñ–∏–ª—å—Ç—Ä: {filter_type}).")
