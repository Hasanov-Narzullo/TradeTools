# utils
from datetime import datetime
from html import escape
from loguru import logger

from api import EVENT_TYPES, fetch_asset_price_with_retry
import asyncio

"""
–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
"""
def format_portfolio(
    assets_in_sub_account: list,
    page: int = 1,
    items_per_page: int = 4,
    total_portfolio_value: float = 0.0,
    total_portfolio_pnl: float = 0.0,
    prices_available_overall: bool = True
) -> tuple[str, int]:
    total_items = len(assets_in_sub_account)
    total_pages = (total_items + items_per_page - 1) // items_per_page if total_items > 0 else 0

    if not assets_in_sub_account and total_pages == 0:
        result = "–í —ç—Ç–æ–º —Å—É–±-—Å—á–µ—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤.\n\n"
    elif page < 1 or (total_pages > 0 and page > total_pages):
        result = f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ({page}). –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}.\n\n"
        page = 1
    else:
        start_idx = (page - 1) * items_per_page
        end_idx = start_idx + items_per_page
        page_items = assets_in_sub_account[start_idx:end_idx]

        result = f"(—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n\n"
        for asset in page_items:
            try:
                symbol = asset['symbol']
                asset_type_str = "–ê–∫—Ü–∏—è" if asset['asset_type'] == "stock" else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
                amount = float(asset['amount'])
                purchase_price = float(asset['purchase_price'])
                current_price = asset.get('current_price')

                result += f"{symbol} ({asset_type_str})\n"
                result += f"–ö–æ–ª-–≤–æ: {amount:.2f}\n"
                result += f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${purchase_price:.2f}\n"


                if current_price is not None:
                    try:
                        current_price_float = float(current_price)
                        current_value = amount * current_price_float
                        result += f"–¢–µ–∫. —Ü–µ–Ω–∞: ${current_price_float:.2f} (–°—Ç–æ–∏–º–æ—Å—Ç—å: ${current_value:.2f})\n"
                        if purchase_price != 0:
                            percentage_change = ((current_price_float - purchase_price) / purchase_price) * 100
                            change_emoji = "üìà" if percentage_change >= 0 else "üìâ"
                            result += f"–ò–∑–º: {change_emoji} {percentage_change:+.2f}%\n"
                        else:
                            result += "–ò–∑–º: –ù/–î (—Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ 0)\n"
                    except (ValueError, TypeError) as e:
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–∫. —Ü–µ–Ω–∞ –∏–ª–∏ —Ä–∞—Å—á–µ—Ç –¥–ª—è {symbol}: {current_price}, {e}")
                        result += "–¢–µ–∫. —Ü–µ–Ω–∞: –û—à–∏–±–∫–∞\n"
                        result += "–ò–∑–º: –ù/–î\n"
                else:
                    result += "–¢–µ–∫. —Ü–µ–Ω–∞: –ù–µ –ø–æ–ª—É—á–µ–Ω–∞\n"
                    result += "–ò–∑–º: –ù/–î\n"

                result += "-" * 20 + "\n"
            except (KeyError, ValueError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞: {asset}. –û—à–∏–±–∫–∞: {e}")
                result += f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∞ {asset.get('symbol', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
                result += "-" * 20 + "\n"

    result += f"\nüí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:* "
    if prices_available_overall:
        result += f"${total_portfolio_value:.2f}\n"
        pnl_emoji = "üìà" if total_portfolio_pnl >= 0 else "üìâ"
        result += f"üìä *–û–±—â–∏–π PnL:* {pnl_emoji} ${total_portfolio_pnl:+.2f}\n"
    else:
        result += "(–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ü–µ–Ω—ã)\n"
        result += f"üìä *–û–±—â–∏–π PnL:* (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ü–µ–Ω—ã)\n"


    return result, total_pages

"""
–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
"""
def format_alerts(alerts: list, page: int = 1, items_per_page: int = 4) -> tuple[str, int]:
    if not alerts:
        return "–ê–ª–µ—Ä—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", 0

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(alerts) + items_per_page - 1) // items_per_page
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_items = alerts[start_idx:end_idx]

    result = f"üîî –í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    for alert in page_items:
        alert_id, user_id, asset_type, symbol, target_price, condition, created_at = alert
        asset_type_display = "–ê–∫—Ü–∏—è" if asset_type == "stock" else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
        condition_display = "–≤—ã—à–µ" if condition == "above" else "–Ω–∏–∂–µ"
        result += (
            f"ID: {str(alert_id)}\n"
            f"–ê–∫—Ç–∏–≤: {symbol} ({asset_type_display})\n"
            f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {str(target_price)}\n"
            f"–£—Å–ª–æ–≤–∏–µ: {condition_display}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(created_at)}\n"
            f"{'-' * 30}\n"
        )

    return result, total_pages

"""
–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
"""
def format_events(events: list, page: int = 1, items_per_page: int = 4) -> tuple[str, int]:
    if not events:
        return "–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.", 0

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(events) + items_per_page - 1) // items_per_page
    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_items = events[start_idx:end_idx]

    result = f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    for event in page_items:
        event_id, event_date, title, description, source, event_type, symbol = event
        event_type_display = EVENT_TYPES.get(event_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
        result += (
            f"–¢–∏–ø: {event_type_display}\n"
            f"–î–∞—Ç–∞: {event_date}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
            f"–ê–∫—Ç–∏–≤: {symbol if symbol else '–û–±—â–µ–µ'}\n"
            f"{'-' * 30}\n"
        )

    return result, total_pages

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞ –∞–∫—Ç–∏–≤–∞.
def validate_symbol(symbol: str, asset_type: str) -> bool:
    if not symbol:
        return False
    if asset_type == "stock":
        return symbol.isalnum()  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞–∫—Ü–∏–π
    elif asset_type == "crypto":
        return "/" in symbol  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT)
    return False

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫.
def log_error(user_id: int, error: str):
    logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error}")

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—ã–≤–æ–¥–∞.
def format_price(price: float) -> str:
    return f"{price:.2f}"

"""
–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¢–∏–∫–µ—Ä | –°—Ç–æ–∏–º–æ—Å—Ç—å' –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /market.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""
def format_market_prices(portfolio):
    if not portfolio:
        return "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç."

    result = "üìà –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã:\n\n"
    for asset in portfolio:
        try:
            symbol = asset['symbol']
            current_price = asset.get('current_price')

            if current_price is not None:
                try:
                    current_price_float = float(current_price)
                    result += f"{symbol} | ${current_price_float:.2f}\n"
                except (ValueError, TypeError):
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {current_price}")
                    result += f"{symbol} | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å\n"
            else:
                result += f"{symbol} | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å\n"

            result += "-" * 20 + "\n"
        except KeyError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞: {asset}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
            result += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫—Ç–∏–≤–∞ {asset.get('symbol', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
            result += "-" * 20 + "\n"

    return result

# –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
def escape_markdown_v2(text: str) -> str:
    reserved_chars = r'_[]()~`>#+-=|{}.!'
    for char in reserved_chars:
        text = text.replace(char, f'\\{char}')
    return text

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞.
def format_market_overview(market_data: dict) -> str:
    result = "üåç –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞:\n\n"

    # –ò–Ω–¥–µ–∫—Å—ã
    result += "üìä *–ò–Ω–¥–µ–∫—Å—ã:*\n"
    for name, data in market_data["indices"].items():
        price = data["price"]
        change_percent = data["change_percent"]
        if price is not None and change_percent is not None:
            change_emoji = "üìà" if change_percent >= 0 else "üìâ"
            result += f"{name}: ${price:.2f} {change_emoji} {change_percent:+.2f}%\n"
        else:
            result += f"{name}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
    result += "-" * 20 + "\n"

    # –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    result += "üõ¢ *–°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n"
    for name, data in market_data["commodities"].items():
        price = data["price"]
        change_percent = data["change_percent"]
        if price is not None and change_percent is not None:
            change_emoji = "üìà" if change_percent >= 0 else "üìâ"
            result += f"{name}: ${price:.2f} {change_emoji} {change_percent:+.2f}%\n"
        else:
            result += f"{name}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
    result += "-" * 20 + "\n"

    # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    result += "üí∞ *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:*\n"
    for name, data in market_data["crypto"].items():
        price = data["price"]
        change_percent = data["change_percent"]
        if price is not None and change_percent is not None:
            change_emoji = "üìà" if change_percent >= 0 else "üìâ"
            result += f"{name}: ${price:.2f} {change_emoji} {change_percent:+.2f}%\n"
        else:
            result += f"{name}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"

    return result

async def calculate_portfolio_summary(portfolio_data: dict) -> tuple[float, float, float]:
    total_current_value = 0.0
    total_purchase_value = 0.0
    prices_fetched = True

    if not portfolio_data:
        return 0.0, 0.0, 0.0

    tasks = []
    asset_details = []

    for sub_account, assets in portfolio_data.items():
        for asset in assets:
            try:
                symbol = asset['symbol']
                asset_type = asset['asset_type']
                amount = float(asset['amount'])
                purchase_price = float(asset['purchase_price'])
                tasks.append(fetch_asset_price_with_retry(symbol, asset_type))
                asset_details.append({'symbol': symbol, 'amount': amount, 'purchase_price': purchase_price})
            except (KeyError, ValueError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∞ –≤ calculate_portfolio_summary: {asset}. –û—à–∏–±–∫–∞: {e}")
                prices_fetched = False

    if not tasks:
         return 0.0, 0.0, 0.0

    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω –¥–ª—è {len(tasks)} –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
    current_prices = await asyncio.gather(*tasks)
    logger.info("–¶–µ–Ω—ã –¥–ª—è —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã.")


    for i, price in enumerate(current_prices):
        details = asset_details[i]
        purchase_value = details['amount'] * details['purchase_price']
        total_purchase_value += purchase_value

        if price is not None:
            current_value = details['amount'] * price
            total_current_value += current_value
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {details['symbol']} –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
            prices_fetched = False


    total_pnl = total_current_value - total_purchase_value

    if not prices_fetched:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")


    return total_current_value, total_purchase_value, total_pnl

