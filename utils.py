from loguru import logger
from datetime import datetime
from html import escape


def format_portfolio(portfolio):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML.
    """
    if not portfolio:
        return "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç."

    result = "<b>üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b><br/>"
    for asset in portfolio:
        try:
            symbol = asset['symbol']
            asset_type = "–ê–∫—Ü–∏—è" if asset['asset_type'] == "stock" else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
            amount = float(asset['amount'])
            purchase_price = float(asset['purchase_price'])
            current_price = asset.get('current_price')

            result += f"<b>{escape(symbol)}</b> ({escape(asset_type)})<br/>"
            result += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount:.2f}<br/>"
            result += f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${purchase_price:.2f}<br/>"

            if current_price is not None:
                try:
                    current_price_float = float(current_price)
                    result += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price_float:.2f}<br/>"
                except (ValueError, TypeError):
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {current_price}")
                    result += "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å<br/>"
            else:
                result += "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å<br/>"

            if current_price is not None and purchase_price != 0:
                try:
                    percentage_change = ((current_price_float - purchase_price) / purchase_price) * 100
                    change_emoji = "üìà" if percentage_change >= 0 else "üìâ"
                    result += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_emoji} {percentage_change:+.2f}%<br/>"
                except (ValueError, TypeError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {symbol}: {e}")
                    result += "–ò–∑–º–µ–Ω–µ–Ω–∏–µ: –ù/–î<br/>"
            else:
                result += "–ò–∑–º–µ–Ω–µ–Ω–∏–µ: –ù/–î<br/>"

            result += "-" * 20 + "<br/>"
        except KeyError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞: {asset}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
            result += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫—Ç–∏–≤–∞ {escape(asset.get('symbol', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}<br/>"
            result += "-" * 20 + "<br/>"
        except (ValueError, TypeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞ {asset.get('symbol', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}: {e}")
            result += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫—Ç–∏–≤–∞ {escape(asset.get('symbol', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}<br/>"
            result += "-" * 20 + "<br/>"

    return result


def format_alerts(alerts: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML."""
    if not alerts:
        return "–ê–ª–µ—Ä—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."

    result = "<b>üîî –í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b><br/>"
    for alert in alerts:
        alert_id, user_id, asset_type, symbol, target_price, condition, created_at = alert
        asset_type_display = "–ê–∫—Ü–∏—è" if asset_type == "stock" else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
        condition_display = "–≤—ã—à–µ" if condition == "above" else "–Ω–∏–∂–µ"
        result += (
            f"ID: {escape(str(alert_id))}<br/>"
            f"–ê–∫—Ç–∏–≤: {escape(symbol)} ({escape(asset_type_display)})<br/>"
            f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {escape(str(target_price))}<br/>"
            f"–£—Å–ª–æ–≤–∏–µ: {escape(condition_display)}<br/>"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {escape(str(created_at))}<br/>"
            f"{'-' * 30}<br/>"
        )
    return result


def format_events(events: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    if not events:
        return "–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç."

    result = "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π:\n\n"
    for event in events:
        event_id, event_date, title, description, source = event
        result += (
            f"–î–∞—Ç–∞: {event_date}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
            f"{'-' * 30}\n"
        )
    return result


def validate_symbol(symbol: str, asset_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞ –∞–∫—Ç–∏–≤–∞."""
    if not symbol:
        return False
    if asset_type == "stock":
        return symbol.isalnum()  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∞–∫—Ü–∏–π
    elif asset_type == "crypto":
        return "/" in symbol  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/USDT)
    return False


def log_error(user_id: int, error: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫."""
    logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error}")


def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    return f"{price:.2f}"

def format_market_prices(portfolio):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¢–∏–∫–µ—Ä | –°—Ç–æ–∏–º–æ—Å—Ç—å' –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /market.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    if not portfolio:
        return "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç."

    result = "<b>üìà –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã:</b><br/>"
    for asset in portfolio:
        try:
            symbol = asset['symbol']
            current_price = asset.get('current_price')

            if current_price is not None:
                try:
                    current_price_float = float(current_price)
                    result += f"<b>{escape(symbol)}</b> | ${current_price_float:.2f}<br/>"
                except (ValueError, TypeError):
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {current_price}")
                    result += f"<b>{escape(symbol)}</b> | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å<br/>"
            else:
                result += f"<b>{escape(symbol)}</b> | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å<br/>"

            result += "-" * 20 + "<br/>"
        except KeyError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞: {asset}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
            result += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫—Ç–∏–≤–∞ {escape(asset.get('symbol', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))}<br/>"
            result += "-" * 20 + "<br/>"

    return result


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
    """
    reserved_chars = r'_[]()~`>#+-=|{}.!'
    for char in reserved_chars:
        text = text.replace(char, f'\\{char}')
    return text