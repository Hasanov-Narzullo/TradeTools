# keyboards
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º callback_data –¥–ª—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.
def main_menu(chat_type: str = 'private', is_admin: bool = False) -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="üìà –ö–æ—Ç–∏—Ä–æ–≤–∫–∏", callback_data="quotes_menu"),
            InlineKeyboardButton(text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio_view_default")
        ],
        [
            InlineKeyboardButton(text="üîî –ê–ª–µ—Ä—Ç—ã", callback_data="alerts_menu"),
            InlineKeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar")
        ],
        [
            InlineKeyboardButton(text="üìä –†—ã–Ω–æ–∫", callback_data="market"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]

    if chat_type in ['group', 'supergroup']:
        keyboard.append([InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_open")])

    keyboard.append([InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def sub_account_select_keyboard(sub_accounts: list[str], action_prefix: str) -> InlineKeyboardMarkup:
    keyboard = []
    for name in sub_accounts:
        keyboard.append([InlineKeyboardButton(text=name, callback_data=f"{action_prefix}_select_{name}")])
    keyboard.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—É–±-—Å—á–µ—Ç", callback_data=f"{action_prefix}_new")])
    keyboard.append([InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def portfolio_view_keyboard(sub_accounts: list[str], current_sub_account: str, current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    keyboard = []
    main_account_name = "–û—Å–Ω–æ–≤–Ω–æ–π"

    if len(sub_accounts) > 1:
        sub_account_buttons = []
        try:
            current_index = sub_accounts.index(current_sub_account)
            has_prev = current_index > 0
            has_next = current_index < len(sub_accounts) - 1

            if has_prev:
                prev_sub = sub_accounts[current_index - 1]
                sub_account_buttons.append(InlineKeyboardButton(text=f"‚óÄÔ∏è {prev_sub}", callback_data=f"p_sw_{prev_sub}"))
            if has_next:
                next_sub = sub_accounts[current_index + 1]
                sub_account_buttons.append(InlineKeyboardButton(text=f"{next_sub} ‚ñ∂Ô∏è", callback_data=f"p_sw_{next_sub}"))
            if sub_account_buttons:
                 keyboard.append(sub_account_buttons)
        except ValueError:
            logger.warning(f"Current sub-account '{current_sub_account}' not found in list: {sub_accounts}")

    asset_action_buttons = [
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞", callback_data=f"p_add_{current_sub_account}"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç—Å—é–¥–∞", callback_data=f"p_rm_{current_sub_account}"),
        InlineKeyboardButton(text="üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="set_alert")
    ]
    keyboard.append(asset_action_buttons)

    pagination_buttons = []
    if current_page > 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"p_pg_{current_sub_account}_{current_page - 1}"))
    if current_page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"p_pg_{current_sub_account}_{current_page + 1}"))
    if pagination_buttons:
        keyboard.append(pagination_buttons)

    sub_account_management_buttons = [
         InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π —Å—É–±-—Å—á–µ—Ç", callback_data="portfolio_add_sub_account_start")
    ]
    if len(sub_accounts) > 1:
         sub_account_management_buttons.append(
             InlineKeyboardButton(text="üóë –£–¥–∞–ª. —Å—É–±-—Å—á–µ—Ç...", callback_data="portfolio_remove_sub_account_start")
         )

    keyboard.append(sub_account_management_buttons)

    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.
def quotes_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É", callback_data="quotes"),
            InlineKeyboardButton(text="üíº –¶–µ–Ω—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è", callback_data="portfolio_prices")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞ (–∞–∫—Ü–∏–∏ –∏–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã).
def asset_type_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–∫—Ü–∏–∏", callback_data="stock")],
        [InlineKeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="crypto")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏—è –∞–ª–µ—Ä—Ç–∞.
def alert_condition_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í—ã—à–µ", callback_data="above"),
            InlineKeyboardButton(text="–ù–∏–∂–µ", callback_data="below")
        ]
    ])

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è.
def cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
def portfolio_actions_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    return pagination_keyboard(current_page, total_pages, "portfolio")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–ª–µ—Ä—Ç–æ–º.
def alert_actions_keyboard(alert_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_alert_{alert_id}"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="alerts")
        ]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞.
def confirm_alert_keyboard(symbol: str, target_price: float, condition: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_alert_{symbol}_{target_price}_{condition}"),
            InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞.
def confirm_remove_asset_keyboard(symbol: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_remove_{symbol}"),
            InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
def alerts_menu_keyboard(current_page: int = 1, total_pages: int = 1) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üìã –¢–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã", callback_data="current_alerts"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="set_alert")
        ],
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="remove_alert"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ]
    if total_pages > 1:
        pagination_row = []
        if current_page > 1:
            pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"alerts_page_{current_page - 1}"))
        if current_page < total_pages:
            pagination_row.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"alerts_page_{current_page + 1}"))
        buttons.append(pagination_row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.
prefix: 'portfolio', 'alerts' –∏–ª–∏ 'calendar' –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö.
"""
def pagination_keyboard(current_page: int, total_pages: int, prefix: str) -> InlineKeyboardMarkup:
    buttons = []
    if current_page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{prefix}_page_{current_page - 1}"))
    if current_page < total_pages:
        buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"{prefix}_page_{current_page + 1}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        buttons,
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu" if prefix in ["portfolio", "calendar"] else "alerts_menu")]
    ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–æ–±—ã—Ç–∏–π.
def calendar_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="calendar_all"),
            InlineKeyboardButton(text="üíº –°–æ–±—ã—Ç–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è", callback_data="calendar_portfolio")
        ],
        [
            InlineKeyboardButton(text="üåç –û–±—â–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ", callback_data="calendar_macro"),
            InlineKeyboardButton(text="üí∏ –î–∏–≤–∏–¥–µ–Ω–¥—ã", callback_data="calendar_dividends")
        ],
        [
            InlineKeyboardButton(text="üìà –û—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏", callback_data="calendar_earnings"),
            InlineKeyboardButton(text="üé§ –ü—Ä–µ—Å—Å-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", callback_data="calendar_press")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])

def get_pagination_keyboard(current_page: int, total_pages: int, category: str) -> InlineKeyboardMarkup:
    buttons = []
    if current_page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calendar_prev_{category}_{current_page}"))
    if current_page < total_pages:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"calendar_next_{category}_{current_page}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons] if buttons else [])
    return keyboard

def get_category_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="calendar_category_crypto")],
        [InlineKeyboardButton(text="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data="calendar_category_investments")],
        [InlineKeyboardButton(text="–í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="calendar_category_all")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def settings_keyboard(chat_id: int, current_allow_all: bool) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text=f"‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" if current_allow_all else "‚ö™Ô∏è –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                callback_data=f"settings_set_all_{chat_id}"
            ),
            InlineKeyboardButton(
                text=f"‚úÖ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã" if not current_allow_all else "‚ö™Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã",
                callback_data=f"settings_set_admins_{chat_id}"
            )
        ],
         [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def confirm_delete_sub_account_keyboard(sub_account_to_delete: str) -> InlineKeyboardMarkup:
     return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å '{sub_account_to_delete}'", callback_data=f"p_conf_del_{sub_account_to_delete}"),
            InlineKeyboardButton(text="üö´ –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_sub_account_delete")
        ]
    ])


def sub_account_select_keyboard_for_delete(sub_accounts: list[str]) -> InlineKeyboardMarkup:
    main_account_name = "–û—Å–Ω–æ–≤–Ω–æ–π"
    keyboard = []
    removable_accounts = [acc for acc in sub_accounts if acc != main_account_name]

    if not removable_accounts:
        keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç —Å—É–±-—Å—á–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", callback_data="cancel")])
    else:
        for name in removable_accounts:
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"p_sel_del_{name}")])

    keyboard.append([InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)